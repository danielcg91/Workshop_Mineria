[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop",
    "section": "",
    "text": "Informaci√≥n general\n\n\nSobre el curso üìåRequisitos previosAgenda üìÜ\n\n\nFuente del curso\n\nFechas: Del 29 al 30 de abril del 2025\nDuraci√≥n del curso: 10 horas\n\nInstructores:\n\nEvelia Coss - posdoctoral LIIGH-UNAM. Miembro de LupusRGMX, Project JAGUAR, RiaBio, CDSB-Mexico, RSG-M√©xico y RLadies Morelia. Coordinadora de los VieRnes de Bioinformatica en el LIIGH. Instructora Certificada de The Carpentries. Contacto: correo, pagina web\nMarisol Navarro - RSG-M√©xico y RLadies Morelia.\nJohana Castel√°n - RSG-M√©xico y RLadies Morelia.\n\nAyudantes:\n\nMariana Devon - Estudiante de maestr√≠a, UAM.\n\nResumen:\nObjetivos:\nEn esta gu√≠a r√°pida aprender√°s a:\nCitar y reutilizar el material del curso\nLos datos del curso se pueden reutilizar y adaptar libremente con la debida atribuci√≥n. Todos los datos de los cursos de estos repositorios est√°n sujetos a la licencia Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).\n\n\n\nDebes tener una cuenta de usuario de GitHub. Para m√°s informaci√≥n, consulta ‚ÄúCreaci√≥n de una cuenta en GitHub‚Äù.\nNo necesitas saber c√≥mo codificar, utilizar la l√≠nea de comandos o instalar Git (el software de control de versiones en el que est√° compilado GitHub).\nContar con una terminal con Git, en Windows puedes usar Git Bash.\n\n\n\n\n\n\n\n\n\n\nTema\nTiempo\n\n\n\n\nüî∑ Secci√≥n 1 - (11:30 - 13:30 h) (7 marzo)\n\n\n\n\nCreaci√≥n de una cuenta en GitHub\n\n5 min\n\n\n\nIntroducci√≥n a Git / GitHub\n\n15 min\n\n\n\nActividad 1: Sincronizaci√≥n y llaves\n\n15 min\n\n\n‚òï Coffee break (10 min) - (12:00-12:10) ‚òï\n10 min\n\n\nüî∑¬† Secci√≥n 2 - (12:10-13:00 h)\n\n\n\n\nComandos usados en Github y RStudio\n\n25 min\n\n\n\nActividad 2: Pagina de inicio en GitHub\n\n15 min\n\n\nüî∑¬† Secci√≥n 3 - (11:30 - 13:30 h) (14 marzo)\n\n\n\n\nBuenas practicas en R\n\n30 min\n\n\n\nActividad 3: Pagina web en GitHub\n\n1:30 min",
    "crumbs": [
      "Informaci√≥n general"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1¬† Introducci√≥n Sobre el Workshop",
    "section": "",
    "text": "1.1 Referencias\nNo olvides las referencias",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introducci√≥n Sobre el Workshop</span>"
    ]
  },
  {
    "objectID": "Cap1.html",
    "href": "Cap1.html",
    "title": "2¬† Descripci√≥n de los datos",
    "section": "",
    "text": "3 Genome database for this workshop\n\n3.0.1 Description of the dataset\nIn this lesson, we will follow a standard pangenomics pipeline that involves genomic annotation, clustering of genes to identify orthologous sequences and build the gene families, and analyzing the pangenome partitions and openness. To illustrate these concepts, we will work with a dataset consisting of eight strains of Streptococcus agalactiae as included in the pioneering pangenome study by Tettelin et al., 2005 (See the Table below).\nWe already have the genomes of strains 18RS21 and H36B available in our pan_workshop/data directory. However, the remaining strains will be downloaded and annotated in the upcoming episodes, allowing us to explore the complete dataset.\nGeneral description of the S. agalactiae genomes\n\n\n\nStrain\nHost\nSerotype\n\n\n\n\nS. agalactiae 18RS21\nHuman\nII\n\n\nS. agalactiae 515\nHuman\nIa\n\n\nS. agalactiae A909\nHuman\nIa\n\n\nS. agalactiae CJB111\nHuman\nV\n\n\nS. agalactiae COH1\nHuman\nIII\n\n\nS. agalactiae H36B\nHuman\nIb\n\n\nS. agalactiae NEM316\nHuman\nIII\n\n\nS. agalactiae 2603V/R\nHuman\nV\n\n\n\n\n\n\n\n\n\nPrepare your genome database\n\n\n\nMake sure you have the pan_workshop/ directory in your home directory. If you do not have it, you can download it with the following instructions.\n$ cd ~ #Make sure you are in the home directory\n$ wget https://zenodo.org/record/7974915/files/pan_workshop.zip?download=1 #Download the `zip` file.\n$ unzip 'pan_workshop.zip?download=1' \n$ rm 'pan_workshop.zip?download=1'\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nA pangenome encompasses the complete collection of genes found in all genomes within a specific group, typically a species.\nComparing the complete genome sequences of all members within a clade allows for the construction of a pangenome.\nThe pangenome consists of two main components: the core genome and the accessory genome.\nThe accessory genome can be further divided into the shell genome and the cloud genome.\nIn an open pangenome, the size of the pangenome significantly increases with the addition of each new genome.\nIn a closed pangenome, only a few gene families are added to the pangenome when a new genome is introduced.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Descripci√≥n de los datos</span>"
    ]
  },
  {
    "objectID": "Cap2.html",
    "href": "Cap2.html",
    "title": "3¬† Descarga y exploraci√≥n de datos",
    "section": "",
    "text": "3.1 Downloading Genomic Data",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Descarga y exploraci√≥n de datos</span>"
    ]
  },
  {
    "objectID": "Cap2.html#downloading-genomic-data",
    "href": "Cap2.html#downloading-genomic-data",
    "title": "3¬† Descarga y exploraci√≥n de datos",
    "section": "",
    "text": "3.1.1 Getting Genomic Data from the NCBI\nIn the previous episode, we downloaded the working directory for this workshop that already contains the genomes of GBS strains 18RS21 and H36B within our pan_workshop/data directory. However, we need another six GBS strains that will be downloaded in this episode. For this purpose, we will learn how to use the specialized ncbi-genome-download package, which was designed to automatically download one or several genomes directly from the NCBI by following specific filters set by user.\nThe ncbi-genome-download package can be installed with Conda. In our case, we have already installed it into the environment under the same name. To use the package, we just have to activate the ncbi-genome-download conda environment.\nTo start using the ncbi-genome-download package, we have to activate the conda environment where it was installed\n$ conda activate /miniconda3/envs/ncbi-genome-download\n\n\n\n\n\n\nOutput\n\n\n\n(ncbi-genome-download) $\n\n\nFor practicality, the prompt will be written only as $ instead of (ncbi-genome-download) $.\nExploring the range of options available in the package is highly recommended in order to choose well and get what you really need. To access the complete list of parameters to incorporate in your downloads, simply type the following command:\nncbi-genome-download --help\n\n\n\n\n\n\nOutput\n\n\n\nusage:  \n ncbi-genome-download [-h] [-s {refseq,genbank}] [-F FILE_FORMATS]  \n                        [-l ASSEMBLY_LEVELS] [-g GENERA] [--genus GENERA]  \n                        [--fuzzy-genus] [-S STRAINS] [-T SPECIES_TAXIDS]  \n                        [-t TAXIDS] [-A ASSEMBLY_ACCESSIONS]  \n                        [-R REFSEQ_CATEGORIES]  \n                        [--refseq-category REFSEQ_CATEGORIES] [-o OUTPUT]  \n                        [--flat-output] [-H] [-P] [-u URI] [-p N] [-r N]  \n                        [-m METADATA_TABLE] [-n] [-N] [-v] [-d] [-V]  \n                        [-M TYPE_MATERIALS]\n                        groups\n    -F FILE_FORMATS, --formats FILE_FORMATS  \n                        Which formats to download (default: genbank).A comma-\n                        separated list of formats is also possible. For\n                        example: \"fasta,assembly-report\". Choose from:\n                        ['genbank', 'fasta', 'rm', 'features', 'gff',\n                        'protein-fasta', 'genpept', 'wgs', 'cds-fasta', 'rna-\n                        fna', 'rna-fasta', 'assembly-report', 'assembly-\n                        stats', 'all']\n    -g GENERA, --genera GENERA  \n                        Only download sequences of the provided genera. A\n                        comma-separated list of genera is also possible. For\n                        example: \"Streptomyces coelicolor,Escherichia coli\".\n                        (default: [])  \n    -S STRAINS, --strains STRAINS   \n                        Only download sequences of the given strain(s). A\n                        comma-separated list of strain names is possible, as\n                        well as a path to a filename containing one name per\n                        line.\n    -A ASSEMBLY_ACCESSIONS, --assembly-accessions ASSEMBLY_ACCESSIONS  \n                        Only download sequences matching the provided NCBI\n                        assembly accession(s). A comma-separated list of\n                        accessions is possible, as well as a path to a\n                        filename containing one accession per line.\n    -o OUTPUT, --output-folder OUTPUT   \n                        Create output hierarchy in specified folder (default:\n                        /home/betterlab)\n    -n, --dry-run       Only check which files to download, don't download\n                        genome files. \n\n\n\n\n\n\n\n\nNote\n\n\n\nImportantly, when using the ncbi-genome-download command, we must specify the group to which the organisms we want to download from NCBI belong. This name must be indicated at the end of the command, after specifying all the search parameters for the genomes of interest that we want to download. The groups‚Äô names include: bacteria, fungi, viral, vertebrates_mammalian, among others.\n\n\nNow, we have to move into our data/ directory\n$ cd ~/pan_workshop/data\nIf you list the contents of this directory (using the ls command), you‚Äôll see several directories, each of which contains the raw data of different strains of Streptococcus agalactiae used in Tettelin et al., (2005) in .gbk and .fasta formats.\n$ ls\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_18RS21   agalactiae_H36B   annotated_mini\n\n\nDownloading several complete genomes could consume significant memory and time. It is essential to ensure the accuracy of the filters or parameters we use before downloading a potentially incorrect list of genomes. A recommended strategy is to utilize the ‚Äìdry-run (or -n) flag included in the ncbi-genome-download package, which conducts a search of the specified genomes without downloading the files. Once we confirm that the list of genomes found is correct, we can proceed with the same command, removing the ‚Äìdry-run flag\nSo, first, let‚Äôs confirm the availability of one of the genomes we aim to download, namely Streptococcus agalactiae 515, on NCBI. To do so, we will employ the ‚Äìdry-run flag mentioned earlier, specifying the genus and strain name, selecting the FASTA format, and indicating its group (bacteria).\n$ ncbi-genome-download --dry-run --genera \"Streptococcus agalactiae\" -S 515 --formats fasta bacteria \n\n\n\n\n\n\nOutput\n\n\n\nConsidering the following 1 assemblies for download: GCF_012593885.1 Streptococcus agalactiae 515 515\n\n\nGreat! The genome is available!\nNow, we can proceed to download it. To better organize our data, we can save this file into a specific directory for this strain. We can indicate this instruction with the --output-folder or -o flag followed by the name we choose. In this case, will be -o agalactie_515. Notice that now we no longer need the flag the -n.\n$ ncbi-genome-download --genera \"Streptococcus agalactiae\" -S 515 --formats fasta -o agalactiae_515 bacteria\nOnce the prompt $ appears again, use the command tree to show the contents of the recently downloaded directory agalactiae_515.\n$ tree agalactiae_515\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_515\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_012593885.1\n            ‚îú‚îÄ‚îÄ GCF_012593885.1_ASM1259388v1_genomic.fna.gz\n            ‚îî‚îÄ‚îÄ MD5SUMS\n\n3 directories, 2 files\n\n\n\n\n\n\n\n\nMD5SUMS file\n\n\n\nApart from the fasta file that we wanted, a file called MD5SUMS was also downloaded. This file has a unique code that identifies the contents of the files of interest, so you can use it to check the integrity of your downloaded copy. We will not cover that step in the lesson but you can check this article to see how you can use it.\n\n\nThe genome file GCF_012593885.1_ASM1259388v1_genomic.fna.gz is a compressed file located inside the directory agalactiae_515/refseq/bacteria/GCF_012593885.1/. Let‚Äôs decompress the file with gunzip and visualize with tree to corroborate the file status.\n$ gunzip agalactiae_515/refseq/bacteria/GCF_012593885.1/GCF_012593885.1_ASM1259388v1_genomic.fna.gz\n$ tree agalactiae_515/\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_515/\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_012593885.1\n            ‚îú‚îÄ‚îÄ GCF_012593885.1_ASM1259388v1_genomic.fna\n            ‚îî‚îÄ‚îÄ MD5SUMS\n\n3 directories, 2 files\n\n\nGCF_012593885.1_ASM1259388v1_genomic.fna is now with fna extension which means is in a nucleotide fasta format. Let‚Äôs move the file to the agalactiae_515/ directory and remove the extra content that we will not use again in this lesson.\n$ mv agalactiae_515/refseq/bacteria/GCF_012593885.1/GCF_012593885.1_ASM1259388v1_genomic.fna agalactiae_515/.\n$ rm -r agalactiae_515/refseq\n$ ls agalactiae_515/\n\n\n\n\n\n\nOutput\n\n\n\nGCF_012593885.1_ASM1259388v1_genomic.fna",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Descarga y exploraci√≥n de datos</span>"
    ]
  },
  {
    "objectID": "Cap3.html",
    "href": "Cap3.html",
    "title": "4¬† Anotaci√≥n",
    "section": "",
    "text": "4.1",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Anotaci√≥n</span>"
    ]
  },
  {
    "objectID": "Cap4.html",
    "href": "Cap4.html",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "",
    "text": "5.1 Introduction to Genome Mining",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#introduction-to-genome-mining",
    "href": "Cap4.html#introduction-to-genome-mining",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "",
    "text": "5.1.1 What is Genome Mining?\n\nIn bioinformatics, genomic mining is defined as the computational analysis of nucleotide sequence data based on the comparison and recognition of conserved patterns. Under this definition, any computational method that involves searching for and predicting physiological or metabolic properties is considered part of genomic mining. The specific focus of genomic mining, when applied to natural products (NPs), is centered on the identification of biosynthetic gene clusters (BGCs) of NPs.\nNatural products (NPs) are low molecular weight organic molecules that encompass a wide and diverse range of chemical entities with multiple biological functions. These molecules can be produced by bacteria, fungi, plants, and animals. Natural products (NPs) thus play various roles that can be analyzed from two main perspectives:\n\nBiological function: This refers to the role the molecule plays in the producing organism.\nAnthropocentric function: This focuses on the utility of NPs for humans, including their use in medicine, agriculture, and other areas.\n\n\nCurrently, more than 126,000 NPs are known to originate from various sources and are classified into six main groups. These groups are defined based on their chemical structure, the enzymes involved in their synthesis, the precursors used, and the final modifications they undergo.\n\n\n\n\n\n\n\n\nClass\nDescription\nExample\n\n\n\n\nPolyketides (PKs)\nPolyketides are organic molecules characterized by a repetitive chain of ketone (&gt;C=O) and methylene (&gt;CH2) groups. Their biosynthesis is similar to fatty acid synthesis, which is crucial to their diversity. These versatile molecules are found in bacteria, fungi, plants, and marine organisms. Notable examples include erythromycin, an antibiotic used to treat respiratory infections, and lovastatin, a lipid-lowering drug that reduces cholesterol. In summary, polyketides have a structure based on the repetition of ketone and methylene groups, with significant medical and pharmacological applications.\nErythromycin\n\n\nNon-Ribosomal Peptides (NRPs)\nNRPs are a family of natural products that differ from ribosomal peptides due to their non-linear synthesis. Their main structure is based on non-ribosomal modules, which include three key domains: Adenylation, acyl carrier, and condensation domain. Relevant examples include Daptomycin, an antibiotic widely used in various infections. Its NRP structure contributes to its antimicrobial activity. Cyclosporine is an immunosuppressant used in organ transplants. Its NRP structure is crucial to its function. In summary, NRPs feature a non-linear modular structure and play a significant role in medicine and chemical biology.\nDaptomycin\n\n\nRibosomally synthesized and Post-translationally modified Peptides (RiPPs)\nRiPPs are a diverse class of natural products of ribosomal origin. These peptides are produced in the ribosomes and then undergo enzymatic modifications after their synthesis. Historically, RiPPs were studied individually, but in 2013, uniform naming guidelines were established for these natural products. RiPPs include examples such as Microcin J25, an antibacterial RiPP produced by Escherichia coli, and Nisin, an antimicrobial RiPP produced by Lactococcus lactis. Their diversity and applications continue to be the subject of ongoing research.\nNisin\n\n\nSaccharides\nSaccharides produced in bacterial secondary metabolism are molecules synthesized by various mechanisms and then undergo subsequent enzymatic modifications based on the addition of carbohydrates. Two notable examples are Kanamycin, an aminoglycoside produced by Streptomyces kanamyceticus, used to treat bacterial infections, and Streptomycin, another aminoglycoside produced by Streptomyces griseus, which was one of the first antibiotics used to treat tuberculosis. Although their use has decreased due to bacterial resistance, they remain important in some cases.\nKanamycin\n\n\nTerpenes\nTraditionally, terpenes have been considered derivatives of 2-methyl-butadiene, better known as isoprene. Although they have been related to isoprene, terpenes do not directly derive from isoprene, as it has never been found as a natural product. The true precursor of terpenes is mevalonic acid, which comes from acetyl coenzyme A. Terpenes originate through the enzymatic polymerization of two or more isoprene units, assembled and modified in many different ways. Most terpenes have multicentric structures that differ not only in functional group but also in their basic carbon skeleton. These compounds are the main constituent of the essential oils of some plants and flowers, such as lemon and orange trees. They serve various functions in plants, such as being part of chlorophyll, carotenoid pigments, gibberellin and abscisic acid hormones, and increasing the fixation of proteins to cell membranes through isoprenylation. Additionally, terpenes are used in traditional medicine, aromatherapy, and as potential pharmacological agents. Two notable examples of terpenes are limonene, present in citrus peels and used in perfumery and cleaning products, and hopanoids, pentacyclic compounds similar to sterols, whose main function is to confer rigidity to the plasma membrane in prokaryotes.\nDiplopterol\n\n\nAlkaloids\nAlkaloids are a class of natural, basic organic compounds that contain at least one nitrogen atom. They are mainly derived from amino acids and are characterized by their water solubility in acidic pH and solubility in organic solvents at alkaline pH. These compounds are found in various organisms, such as plants, fungi, and bacteria. Alkaloids have a wide range of pharmacological activities, such as Quinine, used against malaria, and Ephedrine, a bronchodilator. Additionally, some alkaloids, such as BE-54017, have an unusual structure, as it presents an indenotryptoline skeleton, rarely observed in other bis-indoles; however, its specific application is not well documented.\nBE-54017",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#genome-mining-aims-to-find-bgcs",
    "href": "Cap4.html#genome-mining-aims-to-find-bgcs",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.2 Genome mining aims to find BGCs",
    "text": "5.2 Genome mining aims to find BGCs\nNatural products are encoded in Biosynthetic Gene Clusters (BGCs) in Bacteria. These BGCs are clusters of genes generally placed together in the same genome region. These include the genes encoding the biosynthetic enzymes and those related to the metabolite‚Äôs transport or resistance against antibacterial metabolites. Most BGCs are composed of several types of genes, so genome mining is based on the identification of these genes in a genome.\n\nEach class of biosynthetic gene clusters (BGCs) is distinguished by the types of essential and accessory genes it contains. The most common classes of BGCs for natural products include polyketide synthases (PKSs), non-ribosomal peptide synthetases (NRPSs), ribosomally synthesized and post-translationally modified peptides (RiPPs), and terpenes. For example, non-ribosomal peptides (NRPs) are a class of metabolites characterized by the assembly of amino acid residues or their derivatives, with non-ribosomal peptide synthetases being the enzymes responsible for assembling these molecules. NRPSs are large enzymes organized into modules and domains, similar to other common classes of BGCs. Below, we show you an animation created by Michael W. Mullowney of the biosynthesis of a fictitious NP called ‚Äúfakeomycin‚Äù, which is of the NRPS class with a cyclization domain.\n\nGenome mining consists in analyzing genomes with specialized algorithms designed to find some BGCs. Chemists in the last century diligently characterized some of these clusters. We have extensive databases that contain information about which genes belong to which BGCs and some control sets of genes that do not. The use of genome mining methodologies facilitates the prioritization of BGCs for the search of novel metabolites. Since the era of next-generation sequencing, genomes have been explored as a source for discovering new BGCs.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#chloramphenicol-is-a-known-antibiotic-produced-in-a-bgc",
    "href": "Cap4.html#chloramphenicol-is-a-known-antibiotic-produced-in-a-bgc",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.3 Chloramphenicol is a known antibiotic produced in a BGC",
    "text": "5.3 Chloramphenicol is a known antibiotic produced in a BGC\nFor example, let‚Äôs look into the BGC responsible for chloramphenicol biosynthesis. This is a BGC described for the first time in a Streptomyces venezuelae genome.\n\n\n\n\n\n\n\nExercise 1: Sort the Steps to Identify BGCs Similar to Clavulanic Acid\n\n\n\nBelow is a list of steps in disarray that are part of the process of identifying BGCs similar to clavulanic acid. Your task is to logically order them to establish a coherent methodology that allows the effective identification of such BGCs.\nDisordered Steps:\na. Annotate the genes within the identified BGCs to predict their function.\nb. Compare the identified BGCs against databases of known BGCs to find similarities to clavulanic acid.\nc. Extract DNA from samples of interest, such as microorganism-rich soils or specific bacterial cultures.\nd. Conduct phylogenetic analysis of the BGCs to explore their evolutionary relationship.\ne. Use bioinformatics tools to assemble DNA sequences and detect potential BGCs.\nf. Sequence the extracted DNA using next-generation sequencing (NGS) techniques.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#planning-a-genome-mining-project",
    "href": "Cap4.html#planning-a-genome-mining-project",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.4 Planning a genome mining project",
    "text": "5.4 Planning a genome mining project\nHere we will provide tips and tricks to plan and execute a genome mining project. Firstly, choose a set of genomes from taxa. In this lesson we will be working with S. agalactiae genomes (Tettelin et al., 2005). Although this genus is not know for its potential as a Natural products producer, it is good enough to show different approaches to genome mining. Recently, metagenomes have been considered in genome mining studies. Here are some considerations that might be useful as a genome miner:\n\nThink about a research question before starting to analyze the data.\nRemember, raw metadata should remain intact during all genome mining processes. It could be a good idea to change its file permissions to read-only.\nGather as much information as metadata of all the genomes you work with.\nAll your intermediate steps should be considered temporal and may be removed without risk.\nSave your scripts using a version manager, GitHub for example.\nShare your data in public repositories.\nGive time to make your science repeatable and help your community.\n\n\n\n\n\n\n\nDiscussion 1: Describe your project\n\n\n\nWhat are the advantages of documenting your work? Are there other things you can do to make your mining work more reproducible, like commenting on your scripts, etc.?\n\n\n\n\n\n\nsolution\n\n\n\n\n\nDocumenting your work helps others (including your future self) understand what you have done and facilitates troubleshooting. To make your work more reproducible, you can detail the code logic by commenting on your scripts, use version control systems like Git, have backups of your scripts, share your data and code with others to facilitate feedback, and follow standardized workflows or protocols like those taught in this lesson. You can also name your files properly with a consistent format, structure your directories well, and back up your work regularly. Additionally, keeping a log (or ‚Äúbit√°cora‚Äù) can serve as a tutorial for your future self, making it easier to understand your work later on.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#starting-a-genome-mining-project",
    "href": "Cap4.html#starting-a-genome-mining-project",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.5 Starting a genome mining project",
    "text": "5.5 Starting a genome mining project\nOnce you have chosen your set of genomes, you need to annotate the sequences. The process of genome annotation needs two steps. First, a gene calling approach (structural annotation), which looks for CDS or RNAs within the DNA sequences. Once these features have been detected, you need to assign a function for each CDS (functional annotation). This is usually done through comparison against protein databases. There are tens of bioinformatics tools to annotate genomes, but some of the most broadly used are; RAST (Aziz et al.¬†2008), and Prokka (Seeman, 2014). Here, we will start the genome mining lesson with S. agalactiae genomes already annotated by Prokka. You can download this data from this repository. The annotated genomes are written in GeneBank format (extension ‚Äú.gbk‚Äù). To learn more about the basic annotation of genomes, see the lesson named ‚ÄúPangenome Analysis in Prokaryotes: Annotating Genomic Data‚Äù. These files are also accessible in the‚Ä¶ Insert introduction related to the access to the server??",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#references",
    "href": "Cap4.html#references",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.6 References",
    "text": "5.6 References\n\nAziz, R. K., Bartels, D., Best, A. A., DeJongh, M., Disz, T., Edwards, R. A., ‚Ä¶ & Zagnitko, O. (2008). The RAST Server: rapid annotations using subsystems technology. BMC genomics, 9(1), 1-15.\nSeemann, T. (2014). Prokka: rapid prokaryotic genome annotation. Bioinformatics, 30(14), 2068-2069.\nTettelin, H., Masignani, V., Cieslewicz, M. J., Donati, C., Medini, D., Ward, N. L., ‚Ä¶ & Fraser, C. M. (2005). Genome analysis of multiple pathogenic isolates of Streptococcus agalactiae: implications for the microbial ‚Äúpan-genome‚Äù. Proceedings of the National Academy of Sciences, 102(39), 13950-13955.\nNett, Markus (2014). Kinghorn, A. D., ed.¬†Genome Mining: Concept and Strategies for Natural Product Discovery. Springer International Publishing. pp.¬†199-245. ISBN 978-3-319-04900-7. doi:10.1007/978-3-319-04900-7_4.\nKatz, Leonard; Baltz, Richard H. ¬´Natural product discovery: past, present, and future¬ª. Journal of Industrial Microbiology and Biotechnology 43 (2-3): 155-176. ISSN 1476-5535. doi:10.1007/s10295-015-1723-5.\nMej√≠a Ponce, Paulina M.(2017). An√°lisis filogen√©tico de familias de enzimas que utilizan tRNA, indicios para el descubrimiento de productos naturales ocultos en Actinobacteria. Tesis (M.C.)‚ÄìCentro de Investigaci√≥n y de Estudios Avanzados del I.P.N. Unidad Irapuato. Laboratorio Nacional de Gen√≥mica para la Biodiversidad. 2020-08-13T02:57:32Z.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  }
]