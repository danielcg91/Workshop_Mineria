[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop",
    "section": "",
    "text": "Informaci√≥n general\n\n\nSobre el curso üìåRequisitos previosAgenda 29 de abrilüìÜAgenda 30 de abril üìÜ\n\n\nFuente del curso\n\nFechas: Del 29 al 30 de abril del 2025\nDuraci√≥n del curso: 8 horas\n\nInstructores:\n\nMarisol Navarro - RSG-M√©xico y RLadies Morelia.\nJohana Castel√°n - RSG-M√©xico y RLadies Morelia.\nEvelia Coss - posdoctoral LIIGH-UNAM. Miembro de LupusRGMX, Project JAGUAR, RiaBio, CDSB-Mexico, RSG-M√©xico y RLadies Morelia. Coordinadora de los VieRnes de Bioinformatica en el LIIGH. Instructora Certificada de The Carpentries. Contacto: correo, pagina web\n\nAyudantes:\n\nMayela Fosado - Instituto de Neurobiolog√≠a (INB)-UNAM.\nEmilio Ort√≠z - Instituto de Neurobiolog√≠a (INB)-UNAM.\nMariana Devon - Departamento de Bioinform√°tica en Enfermedades Infecciosas, ESPM-INSP.\nAndr√©s Arredondo - Ciencias Agrogen√≥micas, ENES Le√≥n-UNAM.\nReynaldo Villanueva Enr√≠quez - Instituto de Qu√≠mica (UNAM).\nFrancisco Maximiliano Gonz√°lez Serrano - Centro de Ciencias Gen√≥micas (CCG)-UNAM.\n\nResumen:\nObjetivos:\nEn esta gu√≠a r√°pida aprender√°s a:\nCitar y reutilizar el material del curso\nLos datos del curso se pueden reutilizar y adaptar libremente con la debida atribuci√≥n. Todos los datos de los cursos de estos repositorios est√°n sujetos a la licencia Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).\n\n\n\nDebes tener una cuenta de usuario de GitHub. Para m√°s informaci√≥n, consulta ‚ÄúCreaci√≥n de una cuenta en GitHub‚Äù.\nNo necesitas saber c√≥mo codificar, utilizar la l√≠nea de comandos o instalar Git (el software de control de versiones en el que est√° compilado GitHub).\nContar con una terminal con Git, en Windows puedes usar Git Bash.\n\n\n\n\n\n\n\n\n\n\nMartes\n\n\n\nTema\nTiempo\n\n\n\nPresentaci√≥n del taller (15 min)\nIntroducci√≥n a la Resistencia a Antibi√≥ticos (15 min)\n\n09:00 a 09:30\n\n\n\nDescripci√≥n de los datos (10 min)\nDescarga y exploraci√≥n de datos (20 min)\n\n09:30 a 10:00\n\n\n\nAnotaci√≥n (25 min)\nEncuesta 1 de 3 (05 min)\n\n10:00 a 10:30\n\n\n‚òï Coffee break (30 min) - (12:00-12:10) ‚òï\n10:30 a 11:00\n\n\n\nCARD (25 min)\n\n11:00 a 11:30\n\n\n\nIntroducci√≥n a Miner√≠a Gen√≥mica (30 min)\n\n11:30 a 12:00\n\n\n\nBases de datos de Miner√≠a Gen√≥mica (30 min)\n\n12:00 a 12:30\n\n\n\nEncuesta 2 de 3 (05 min)\nPl√°tica Reynaldo (15 min) m√°s preguntas\n\n12:30 a 13:00\n\n\n\n\n\n\n\n\n\n\n\n\nMiercoles\n\n\n\nTema\nTiempo\n\n\n\nIdentificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios (30 min)\n\n09:00 a 09:30\n\n\n\nRedes de similitud de BGCs (30 min)\n\n09:30 a 10:00\n\n\n\nHomologous BGCs clusterization (30 min)\nClusterizaci√≥n BGC Homologa\n\n10:00 a 10:30\n\n\n‚òï Coffee break (30 min) ‚òï\n10:30 a 11:00\n\n\nPl√°tica Francisco (15 min)\n11:00 a 11:30\n\n\n\nEncontrando Variaciones en Vecindades Gen√≥micas¬† (30 min)\n\n11:30 a 12:00\n\n\n\nMiner√≠a Gen√≥mica Evolutiva (30 min)\n\n12:00 a 12:30\n\n\n\nPresentaciones de asistentes\n\n12:30 a 13:00",
    "crumbs": [
      "Informaci√≥n general"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Workshop",
    "section": "",
    "text": "Introducci√≥n Sobre el Workshop\nMiner√≠a Gen√≥mica Bacteriana: Identificaci√≥n de genes de producci√≥n y resistencia antimicrobiana\nReferencias\nNo olvides las referencias",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>intro.html</span>"
    ]
  },
  {
    "objectID": "Cap1.html",
    "href": "Cap1.html",
    "title": "2¬† Introduction to Pangenomics",
    "section": "",
    "text": "2.1 Unveiling the Genomic Complexity: The Pangenome Paradigm",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to Pangenomics</span>"
    ]
  },
  {
    "objectID": "Cap1.html#unveiling-the-genomic-complexity-the-pangenome-paradigm",
    "href": "Cap1.html#unveiling-the-genomic-complexity-the-pangenome-paradigm",
    "title": "2¬† Introduction to Pangenomics",
    "section": "",
    "text": "2.1.1 A brief history of the concept ‚ÄúPangenome‚Äù\nThe concept of Pangenomics was created by Tettelin et al., whose goal was to develop a vaccine against Group B Streptococcus (GBS, or Streptococcus agalactiae), a human pathogen causing neonatal infections. Previous to this, reverse vaccinology had been successfully applied to Neisseria meningitidis using a single genome. However, in the case of S. agalactiae, two complete sequences were available when the project started. These initial genomic studies revealed significant variability in gene content among closely related S. agalactiae isolates, challenging the assumption that a single genome could represent an entire species. Consequently, the collaborative team decided to sequence six additional genomes, representing the major disease-causing serotypes. The comparison of these genomes confirmed the presence of diverse regions, including differential pathogenicity islands, and revealed that the shared set of genes accounted for only about 80% of an individual genome. The existence of broad genomic diversity prompted the question of how many sequenced genomes are needed to identify all possible genes harbored by S. agalactiae. Motivated by the goal of identifying vaccine candidates, the collaborators engaged in active discussions, scientific drafts, and the development of a mathematical model to determine the optimal number of sequenced strains. And, this is how these pioneering authors introduced the revolutionary concept of the pangenome in 2005.\nThe term ‚Äúpangenome‚Äù is a fusion of the Greek words pan, which means ‚Äòwhole‚Äô, and genome, referring to the complete set of genes in an organism. By definition, a pangenome represents the entirety of genes present in a group of organisms, typically a species. Notably, the pangenome concept extends beyond bacteria and can be applied to any taxa of interest, including humans, animals, plants, fungi, archea, or viruses.\n\n\n\n\n\n\nPizza pangenomics\n\n\n\nDo you feel confused about what a pangenome is? Look at this analogy!\n\n\n\n\n\n\nSolution\n\n\n\n\n\nImagine you‚Äôre on a mission to open the finest pizza restaurant, aiming to offer your customers a wide variety of pizzas from around the world. To achieve this, you set out to gather all the pizza recipes ever created, including margherita, quattro formaggi, pepperoni, Hawaiian, and more. As you examine these recipes, you begin to notice that certain ingredients appear in multiple pizzas, while others are unique to specific recipes.\nIn this analogy, the pizza is your species of interest. Your collection of pizza recipes represents the pangenome, which encompasses the entire diversity of pizzas. Each pizza recipe corresponds to one genome, and its ingredients to genes. The ‚Äúsame‚Äù ingredient (such as tomato) in the different recipes, would constitute a gene family. Within these common ingredients, there may be variations in brands or preparation styles, reflecting the gene variation within the gene families.\nAs you continue to add more recipes to your collection, you gain a better understanding of the vast diversity in pizza-making techniques. This enables you to fulfill your objective of offering your customers the most comprehensive and diverse pizza menu.\n\n\n\n\n\n\n\n2.1.2 The components and classification of pangenomes\nThe pangenome consists of two primary components or partitions: core genome and accessory genome. The core genome comprises gene families that are present in all the genomes being compared, while the accessory genome consists of gene families that are not shared by all genomes. Within the accessory genome, we can further distinguish two partitions, the shell genome, which encompasses the gene families found in the majority of genomes, and the cloud genome, which comprises gene families present in only a minority of genomes. It is worth mentioning that, the specific percentages used to define these partitions may vary across different pangenome analysis software and among researchers. Additional terms such as persistent genome and soft-core genome are also commonly used in the field for the groups of genes that are in almost all of the genomes considered.\n\n\n\n\n\n\nExercise 1(Begginer): Pizza pangenomics\n\n\n\n\nWhat are the partitions in your pizza pangenome?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nDuring your expedition of gathering pizza recipes you find that only flour, water, salt, and yeast are in all the recipes, this is your pizza core genome. Since the vast majority of pizzas have tomato sauce and cheese (believe it or not, there are white pizzas without tomato sauce and pizzas without cheese), you put the tomato and the cheese in the soft-core genome. Other ingredients like basil and olive oil are very common so they go to the shell genome, and finally the weirdos like pineapple go to the cloud genome.Genome database for this workshop\n\n\n\n\n\n\nThe concept of pangenome encompasses two types: the open pangenome and the closed pangenome. An open pangenome refers to a scenario where the addition of new genomes to a species leads to a significant increase in the total number of gene families. This indicates a high level of genomic diversity and the potential acquisition of new traits with each newly included genome. In contrast, a closed pangenome occurs when the incorporation of new genomes does not contribute significantly to the overall gene family count. In a closed pangenome, the gene family pool remains relatively stable and limited, indicating a lower degree of genomic diversity within the species.\n\no understand these concepts better, we can visualize the pangenome as a matrix representing the presence (1) or absence (0) of orthologous gene families. The columns represent the gene families, while the rows represent the genomes added to the pangenome. In an open pangenome, the number of columns increases significantly as new genomes are added. Conversely, in a closed pangenome, the number of columns remains relatively unchanged as the number of genomes increases. This suggests that the species maintains a consistent set of gene families. Consequently, the size of the core genome in a closed pangenome closely matches that of a single complete genome of the species. In contrast, the core size of an open pangenome is relatively smaller compared to the size of an individual genome.\nIn summary, the terms ‚Äúopen pangenome‚Äù and ‚Äúclosed pangenome‚Äù describe the dynamic nature of gene content in a species, with the former signifying an expanding gene family pool and the latter representing a more stable gene family repertoire.\n\n\n\n\n\n\nExercise 2(Begginer): Open or closed?\n\n\n\nThe size of a pangenome can be influenced by factors such as the extent of gene transfer, interactions with other species in the environment they co-habit, the diversity of niches inhabited, and the lifestyle of the species, among others.\nConsidering a human lung pathogen and a soil bacterium, which one do you believe is more likely to have a closed pangenome, characterized by a relatively stable gene pool, and why?\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nBased on the assumption that a human lung pathogen may have a more specialized lifestyle and limited exposure to diverse environments, it is likely to possess a closed pangenome. In contrast, a soil bacterium, which encounters a wide range of ecological niches and interacts with various organisms, is more likely to have an open pangenome. However, these assumptions are not always true. Thus, further investigation and analysis are required to confirm these assumptions for the different species of interest.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to Pangenomics</span>"
    ]
  },
  {
    "objectID": "Cap1.html#genome-database-for-this-workshop",
    "href": "Cap1.html#genome-database-for-this-workshop",
    "title": "2¬† Introduction to Pangenomics",
    "section": "2.2 Genome database for this workshop",
    "text": "2.2 Genome database for this workshop\n\n2.2.1 Description of the dataset\nIn this lesson, we will follow a standard pangenomics pipeline that involves genomic annotation, clustering of genes to identify orthologous sequences and build the gene families, and analyzing the pangenome partitions and openness. To illustrate these concepts, we will work with a dataset consisting of eight strains of Streptococcus agalactiae as included in the pioneering pangenome study by Tettelin et al., 2005 (See the Table below).\nWe already have the genomes of strains 18RS21 and H36B available in our pan_workshop/data directory. However, the remaining strains will be downloaded and annotated in the upcoming episodes, allowing us to explore the complete dataset.\nGeneral description of the S. agalactiae genomes\n\n\n\nStrain\nHost\nSerotype\n\n\n\n\nS. agalactiae 18RS21\nHuman\nII\n\n\nS. agalactiae 515\nHuman\nIa\n\n\nS. agalactiae A909\nHuman\nIa\n\n\nS. agalactiae CJB111\nHuman\nV\n\n\nS. agalactiae COH1\nHuman\nIII\n\n\nS. agalactiae H36B\nHuman\nIb\n\n\nS. agalactiae NEM316\nHuman\nIII\n\n\nS. agalactiae 2603V/R\nHuman\nV\n\n\n\n\n\n\n\n\n\nPrepare your genome database\n\n\n\nMake sure you have the pan_workshop/ directory in your home directory. If you do not have it, you can download it with the following instructions.\n$ cd ~ #Make sure you are in the home directory\n$ wget https://zenodo.org/record/7974915/files/pan_workshop.zip?download=1 #Download the `zip` file.\n$ unzip 'pan_workshop.zip?download=1' \n$ rm 'pan_workshop.zip?download=1'\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nA pangenome encompasses the complete collection of genes found in all genomes within a specific group, typically a species.\nComparing the complete genome sequences of all members within a clade allows for the construction of a pangenome.\nThe pangenome consists of two main components: the core genome and the accessory genome.\nThe accessory genome can be further divided into the shell genome and the cloud genome.\nIn an open pangenome, the size of the pangenome significantly increases with the addition of each new genome.\nIn a closed pangenome, only a few gene families are added to the pangenome when a new genome is introduced.\n\n\n\nReferences\nhttps://carpentries-incubator.github.io/pangenomics/01-introduction/index.html",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to Pangenomics</span>"
    ]
  },
  {
    "objectID": "Cap2.html",
    "href": "Cap2.html",
    "title": "3¬† Descarga y exploraci√≥n de datos",
    "section": "",
    "text": "3.1 Downloading Genomic Data",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Descarga y exploraci√≥n de datos</span>"
    ]
  },
  {
    "objectID": "Cap2.html#downloading-genomic-data",
    "href": "Cap2.html#downloading-genomic-data",
    "title": "3¬† Descarga y exploraci√≥n de datos",
    "section": "",
    "text": "3.1.1 Getting Genomic Data from the NCBI\nIn the previous episode, we downloaded the working directory for this workshop that already contains the genomes of GBS strains 18RS21 and H36B within our pan_workshop/data directory. However, we need another six GBS strains that will be downloaded in this episode. For this purpose, we will learn how to use the specialized ncbi-genome-download package, which was designed to automatically download one or several genomes directly from the NCBI by following specific filters set by user.\nThe ncbi-genome-download package can be installed with Conda. In our case, we have already installed it into the environment under the same name. To use the package, we just have to activate the ncbi-genome-download conda environment.\nTo start using the ncbi-genome-download package, we have to activate the conda environment where it was installed\n$ conda activate /miniconda3/envs/ncbi-genome-download\n\n\n\n\n\n\nOutput\n\n\n\n(ncbi-genome-download) $\n\n\nFor practicality, the prompt will be written only as $ instead of (ncbi-genome-download) $.\nExploring the range of options available in the package is highly recommended in order to choose well and get what you really need. To access the complete list of parameters to incorporate in your downloads, simply type the following command:\nncbi-genome-download --help\n\n\n\n\n\n\nOutput\n\n\n\nusage:  \n ncbi-genome-download [-h] [-s {refseq,genbank}] [-F FILE_FORMATS]  \n                        [-l ASSEMBLY_LEVELS] [-g GENERA] [--genus GENERA]  \n                        [--fuzzy-genus] [-S STRAINS] [-T SPECIES_TAXIDS]  \n                        [-t TAXIDS] [-A ASSEMBLY_ACCESSIONS]  \n                        [-R REFSEQ_CATEGORIES]  \n                        [--refseq-category REFSEQ_CATEGORIES] [-o OUTPUT]  \n                        [--flat-output] [-H] [-P] [-u URI] [-p N] [-r N]  \n                        [-m METADATA_TABLE] [-n] [-N] [-v] [-d] [-V]  \n                        [-M TYPE_MATERIALS]\n                        groups\n    -F FILE_FORMATS, --formats FILE_FORMATS  \n                        Which formats to download (default: genbank).A comma-\n                        separated list of formats is also possible. For\n                        example: \"fasta,assembly-report\". Choose from:\n                        ['genbank', 'fasta', 'rm', 'features', 'gff',\n                        'protein-fasta', 'genpept', 'wgs', 'cds-fasta', 'rna-\n                        fna', 'rna-fasta', 'assembly-report', 'assembly-\n                        stats', 'all']\n    -g GENERA, --genera GENERA  \n                        Only download sequences of the provided genera. A\n                        comma-separated list of genera is also possible. For\n                        example: \"Streptomyces coelicolor,Escherichia coli\".\n                        (default: [])  \n    -S STRAINS, --strains STRAINS   \n                        Only download sequences of the given strain(s). A\n                        comma-separated list of strain names is possible, as\n                        well as a path to a filename containing one name per\n                        line.\n    -A ASSEMBLY_ACCESSIONS, --assembly-accessions ASSEMBLY_ACCESSIONS  \n                        Only download sequences matching the provided NCBI\n                        assembly accession(s). A comma-separated list of\n                        accessions is possible, as well as a path to a\n                        filename containing one accession per line.\n    -o OUTPUT, --output-folder OUTPUT   \n                        Create output hierarchy in specified folder (default:\n                        /home/betterlab)\n    -n, --dry-run       Only check which files to download, don't download\n                        genome files. \n\n\n\n\n\n\n\n\nNote\n\n\n\nImportantly, when using the ncbi-genome-download command, we must specify the group to which the organisms we want to download from NCBI belong. This name must be indicated at the end of the command, after specifying all the search parameters for the genomes of interest that we want to download. The groups‚Äô names include: bacteria, fungi, viral, vertebrates_mammalian, among others.\n\n\nNow, we have to move into our data/ directory\n$ cd ~/pan_workshop/data\nIf you list the contents of this directory (using the ls command), you‚Äôll see several directories, each of which contains the raw data of different strains of Streptococcus agalactiae used in Tettelin et al., (2005) in .gbk and .fasta formats.\n$ ls\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_18RS21   agalactiae_H36B   annotated_mini\n\n\nDownloading several complete genomes could consume significant memory and time. It is essential to ensure the accuracy of the filters or parameters we use before downloading a potentially incorrect list of genomes. A recommended strategy is to utilize the ‚Äìdry-run (or -n) flag included in the ncbi-genome-download package, which conducts a search of the specified genomes without downloading the files. Once we confirm that the list of genomes found is correct, we can proceed with the same command, removing the ‚Äìdry-run flag\nSo, first, let‚Äôs confirm the availability of one of the genomes we aim to download, namely Streptococcus agalactiae 515, on NCBI. To do so, we will employ the ‚Äìdry-run flag mentioned earlier, specifying the genus and strain name, selecting the FASTA format, and indicating its group (bacteria).\n$ ncbi-genome-download --dry-run --genera \"Streptococcus agalactiae\" -S 515 --formats fasta bacteria \n\n\n\n\n\n\nOutput\n\n\n\nConsidering the following 1 assemblies for download: GCF_012593885.1 Streptococcus agalactiae 515 515\n\n\nGreat! The genome is available!\nNow, we can proceed to download it. To better organize our data, we can save this file into a specific directory for this strain. We can indicate this instruction with the --output-folder or -o flag followed by the name we choose. In this case, will be -o agalactie_515. Notice that now we no longer need the flag the -n.\n$ ncbi-genome-download --genera \"Streptococcus agalactiae\" -S 515 --formats fasta -o agalactiae_515 bacteria\nOnce the prompt $ appears again, use the command tree to show the contents of the recently downloaded directory agalactiae_515.\n$ tree agalactiae_515\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_515\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_012593885.1\n            ‚îú‚îÄ‚îÄ GCF_012593885.1_ASM1259388v1_genomic.fna.gz\n            ‚îî‚îÄ‚îÄ MD5SUMS\n\n3 directories, 2 files\n\n\n\n\n\n\n\n\nMD5SUMS file\n\n\n\nApart from the fasta file that we wanted, a file called MD5SUMS was also downloaded. This file has a unique code that identifies the contents of the files of interest, so you can use it to check the integrity of your downloaded copy. We will not cover that step in the lesson but you can check this article to see how you can use it.\n\n\nThe genome file GCF_012593885.1_ASM1259388v1_genomic.fna.gz is a compressed file located inside the directory agalactiae_515/refseq/bacteria/GCF_012593885.1/. Let‚Äôs decompress the file with gunzip and visualize with tree to corroborate the file status.\n$ gunzip agalactiae_515/refseq/bacteria/GCF_012593885.1/GCF_012593885.1_ASM1259388v1_genomic.fna.gz\n$ tree agalactiae_515/\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_515/\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_012593885.1\n            ‚îú‚îÄ‚îÄ GCF_012593885.1_ASM1259388v1_genomic.fna\n            ‚îî‚îÄ‚îÄ MD5SUMS\n\n3 directories, 2 files\n\n\nGCF_012593885.1_ASM1259388v1_genomic.fna is now with fna extension which means is in a nucleotide fasta format. Let‚Äôs move the file to the agalactiae_515/ directory and remove the extra content that we will not use again in this lesson.\n$ mv agalactiae_515/refseq/bacteria/GCF_012593885.1/GCF_012593885.1_ASM1259388v1_genomic.fna agalactiae_515/.\n$ rm -r agalactiae_515/refseq\n$ ls agalactiae_515/\n\n\n\n\n\n\nOutput\n\n\n\nGCF_012593885.1_ASM1259388v1_genomic.fna",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Descarga y exploraci√≥n de datos</span>"
    ]
  },
  {
    "objectID": "Cap2.html#download-multiple-genomes",
    "href": "Cap2.html#download-multiple-genomes",
    "title": "3¬† Descarga y exploraci√≥n de datos",
    "section": "3.2 Download multiple genomes",
    "text": "3.2 Download multiple genomes\nSo far, we have learned how to download a single genome using the ncbi-genome-download package. Now, we need to retrieve an additional five GBS strains using the same method. However, this time, we will explore how to utilize loops to automate and expedite the process of downloading multiple genomes in batches.\nUsing the nano editor, create a file to include the name of the other four strains: A909, COH1, CJB111, NEM316, and 2603V/R. Each strain should be written on a separate line in the file, which should be named ‚ÄúTettelinList.txt‚Äù\n$ nano TettelinList.txt  \n\n\n\n\n\n\nThe ‚Äúnano‚Äù editor\n\n\n\nNano is a straightforward and user-friendly text editor designed for use within the terminal interface. After launching Nano, you can immediately begin typing and utilize your arrow keys to navigate between characters and lines. When your text is ready, press the Esc key and type :wq to save your changes and exit Nano, confirming the filename if prompted. Conversely, if you wish to exit Nano without saving any changes, press Esc followed by :q!. For more advanced functionalities, you can refer to the nano manual.\n\n\nVisualize ‚ÄúTettelin.txt‚Äù contents with the cat command.\n$ cat TettelinList.txt  \n\n\n\n\n\n\nOutput\n\n\n\nA909  \nCOH1  \nCJB111 \nNEM316\n2603V/R\n\n\nFirst, let‚Äôs read the lines of the file in a loop, and print them in the terminal with the echo strain $line command.\nstrain is just a word that we will print, and $line will store the value of each of the lines of the Tettelin.txt file.\n$ cat TettelinList.txt | while read line \ndo \necho strain $line\ndone\n\n\n\n\n\n\nOutput\n\n\n\nstrain A909  \nstrain COH1  \nstrain CJB111 \nstrain NEM316\nstrain 2603V/R\n\n\nWe can now check if these strains are available in NCBI (remember to use the -n flag so genome files aren‚Äôt downloaded).\n$ cat TettelinList.txt | while read line\ndo\necho strain $line\nncbi-genome-download --formats fasta --genera \"Streptococcus agalactiae\" -S $line -n bacteria\ndone\n\n\n\n\n\n\nOutput\n\n\n\nstrain A909  \nConsidering the following 1 assemblies for download:  \nGCF_000012705.1 Streptococcus agalactiae A909   A909  \nstrain COH1  \nConsidering the following 1 assemblies for download:  \nGCF_000689235.1 Streptococcus agalactiae COH1   COH1  \nstrain CJB111  \nConsidering the following 2 assemblies for download:  \nGCF_000167755.1 Streptococcus agalactiae CJB111 CJB111  \nGCF_015221735.2 Streptococcus agalactiae CJB111 CJB111  \nstrain NEM316\nConsidering the following 1 assemblies for download:\nGCF_000196055.1 Streptococcus agalactiae NEM316 NEM316\nstrain 2603V/R\nConsidering the following 1 assemblies for download:\nGCF_000007265.1 Streptococcus agalactiae 2603V/R        2603V/R\n\n\nThe tool has successfully found the five strains. Notice that the strain CJB111 contains two versions.\nWe can now proceed to download these strains to their corresponding output directories by adding the -o flag followed by the directory name and removing the -n flag).\n$ cat TettelinList.txt | while read line \ndo\necho downloading strain $line\nncbi-genome-download --formats fasta --genera \"Streptococcus agalactiae\" -S $line -o agalactiae_$line bacteria\ndone\n\n\n\n\n\n\nOutput\n\n\n\ndownloading strain A909\ndownloading strain COH1\ndownloading strain CJB111\ndownloading strain NEM316\ndownloading strain 2603V/R\n\n\n\n\n\n\n\n\nExercise 1(Begginer): Loops\n\n\n\nLet‚Äôs further practice using loops to download genomes in batches. For the sentences below, select only the necessary and their correct order to achieve the desired output:\nA) ncbi-genome-download --formats fasta --genera \"Streptococcus agalactiae\" -S strain -o agalactiae_strain bacteria\nB) cat TettlinList.txt | while read strain\nC) done\nD) echo Downloading line\nE) cat TettlinList.txt | while read line\nF) do\nG) ncbi-genome-download --formats fasta --genera \"Streptococcus agalactiae\" -S $strain -o agalactiae_$strain bacteria\nH) echo Downloading $strain\nDesired Output\n\n\n\n\n\n\nOutput\n\n\n\n Downloading A909\n Downloading COH1\n Downloading CJB111\n Downloading NEM316\n Downloading 2603V/R\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nB, F, H, G, D\n\n\n\n\n\nJust as before, we should decompress the downloaded genome files using gunzip. To do so, we can use the * wildcard, which means ‚Äúanything‚Äù, instead of unzipping one by one.\n$ gunzip agalactiae_*/refseq/bacteria/*/*gz\nLet‚Äôs visualize the structure of the results\n$ tree agalactiae_*\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_2603V\n‚îî‚îÄ‚îÄ R\n    ‚îî‚îÄ‚îÄ refseq\n        ‚îî‚îÄ‚îÄ bacteria\n            ‚îî‚îÄ‚îÄ GCF_000007265.1\n                ‚îú‚îÄ‚îÄ GCF_000007265.1_ASM726v1_genomic.fna.gz\n                ‚îî‚îÄ‚îÄ MD5SUMS\nagalactiae_515\n‚îî‚îÄ‚îÄ GCF_012593885.1_ASM1259388v1_genomic.fna\nagalactiae_A909\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_000012705.1\n            ‚îú‚îÄ‚îÄ GCF_000012705.1_ASM1270v1_genomic.fna\n            ‚îî‚îÄ‚îÄ MD5SUMS\nagalactiae_CJB111\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îú‚îÄ‚îÄ GCF_000167755.1\n        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GCF_000167755.1_ASM16775v1_genomic.fna\n        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ MD5SUMS\n        ‚îî‚îÄ‚îÄ GCF_015221735.2\n            ‚îú‚îÄ‚îÄ GCF_015221735.2_ASM1522173v2_genomic.fna\n            ‚îî‚îÄ‚îÄ MD5SUMS\nagalactiae_COH1\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_000689235.1\n            ‚îú‚îÄ‚îÄ GCF_000689235.1_GBCO_p1_genomic.fna\n            ‚îî‚îÄ‚îÄ MD5SUMS\nagalactiae_H36B\n‚îú‚îÄ‚îÄ Streptococcus_agalactiae_H36B.fna\n‚îî‚îÄ‚îÄ Streptococcus_agalactiae_H36B.gbk\nagalactiae_NEM316\n‚îî‚îÄ‚îÄ refseq\n    ‚îî‚îÄ‚îÄ bacteria\n        ‚îî‚îÄ‚îÄ GCF_000196055.1\n            ‚îú‚îÄ‚îÄ GCF_000196055.1_ASM19605v1_genomic.fna\n            ‚îî‚îÄ‚îÄ MD5SUMS\n\n3 directories, 2 files\n\n\nWe noticed that all fasta files but GCF_000007265.1_ASM726v1_genomic.fna.gz have been decompressed. That decompression failure was because the 2603V/R strain has a different directory structure. This structure is a consequence of the name of the strain because the characters ‚Äú/R‚Äù are part of the name, a directory named R has been added to the output, changing the directory structure. Differences like this are expected to occur in big datasets and must be manually curated after the general cases have been treated with scripts. In this case the tree command has helped us to identify the error. Let‚Äôs decompress the file GCF_000007265.1_ASM726v1_genomic.fna.gz and move it to the agalactiae_2603V/ directory. We will use it like this although it doesn‚Äôt have the real strain name.\n$  gunzip agalactiae_2603V/R/refseq/bacteria/*/*gz\n$  mv  agalactiae_2603V/R/refseq/bacteria/GCF_000007265.1/GCF_000007265.1_ASM726v1_genomic.fna agalactiae_2603V/\n$  rm -r agalactiae_2603V/R/\n$  ls agalactiae_2603V\n\n\n\n\n\n\nOutput\n\n\n\nGCF_000007265.1_ASM726v1_genomic.fna\n\n\nFinally, we need to move the other genome files to their corresponding locations and get rid of unnecessary directories. To do so, we‚Äôll use a while cycle as follows.\nBeware of the typos! Take it slowly and make sure you are sending the files to the correct location.\n$ cat TettelinList.txt | while read line\ndo \necho moving fasta file of strain $line\nmv agalactiae_$line/refseq/bacteria/*/*.fna agalactiae_$line/. \ndone\n\n\n\n\n\n\nOutput\n\n\n\nmoving fasta file of strain A909\nmoving fasta file of strain COH1\nmoving fasta file of strain CJB111\nmoving fasta file of strain NEM316\nmoving fasta file of strain 2603V/R\nmv: cannot stat 'agalactiae_2603V/R/refseq/bacteria/*/*.fna': No such file or directory\n\n\nThats ok, it is just telling us that the agalactiae_2603V/R/ does not have an fna file, which is what we wanted.\nUse the tree command to make sure that everything is in its right place.\nNow let‚Äôs remove the refseq/ directories completely:\n$ cat TettelinList.txt | while read line\ndo \necho removing refseq directory of strain $line\nrm -r agalactiae_$line/refseq\ndone\n\n\n\n\n\n\nOutput\n\n\n\nremoving refseq directory of strain A909\nremoving refseq directory of strain COH1\nremoving refseq directory of strain CJB111\nremoving refseq directory of strain NEM316\nremoving refseq directory of strain 2603V/R\nrm: cannot remove 'agalactiae_2603V/R/refseq': No such file or directory\n\n\nAt this point, you should have eight directories starting with agalactiae_ containing the following:\n$ tree agalactiae_*\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_18RS21\n‚îú‚îÄ‚îÄ Streptococcus_agalactiae_18RS21.fna\n‚îî‚îÄ‚îÄ Streptococcus_agalactiae_18RS21.gbk\nagalactiae_2603V\n‚îî‚îÄ‚îÄ GCF_000007265.1_ASM726v1_genomic.fna\nagalactiae_515\n‚îî‚îÄ‚îÄ GCF_012593885.1_ASM1259388v1_genomic.fna\nagalactiae_A909\n‚îî‚îÄ‚îÄ GCF_000012705.1_ASM1270v1_genomic.fna\nagalactiae_CJB111\n‚îú‚îÄ‚îÄ GCF_000167755.1_ASM16775v1_genomic.fna\n‚îî‚îÄ‚îÄ GCF_015221735.2_ASM1522173v2_genomic.fna\nagalactiae_COH1\n‚îî‚îÄ‚îÄ GCF_000689235.1_GBCO_p1_genomic.fna\nagalactiae_H36B\n‚îú‚îÄ‚îÄ Streptococcus_agalactiae_H36B.fna\n‚îî‚îÄ‚îÄ Streptococcus_agalactiae_H36B.gbk\nagalactiae_NEM316\n‚îî‚îÄ‚îÄ GCF_000196055.1_ASM19605v1_genomic.fna\n\n0 directories, 1 file\n\n\nWe can see that the strain CJB111 has two files, since we will only need one, let‚Äôs remove the second one:\n$ rm agalactiae_CJB111/GCF_015221735.2_ASM1522173v2_genomic.fna\n&lt;!‚Äì# In this example, we have downloaded the genome in fasta format. However, we can use the --format or -F flags to get any other format of interest. For example, the gbk format files (which contain information about the coding sequences, their locus, the name of the protein, and the full nucleotide sequence of the assembly, and are useful for annotation double-checking) can be downloaded by specifying our queries with --format genbank. ‚Äì&gt;\n\n\n\n\n\n\nExercise 2(Advanced): Searching for desired strains\n\n\n\nUntil now we have downloaded only specific strains that we were looking for. Write a command that would tell you which genomes are available for all the Streptococcus genera.\nBonus: Make a file with the output of your search.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse the -n flag to make it a dry run. Search only for the genus Streptococcus without using the strain flag.\n$  ncbi-genome-download -F fasta --genera \"Streptococcus\" -n bacteria\n\n\n\n\n\n\nOutput\n\n\n\nConsidering the following 18331 assemblies for download:\nGCF_000959925.1 Streptococcus gordonii  G9B\nGCF_000959965.1 Streptococcus gordonii  UB10712\nGCF_000963345.1 Streptococcus gordonii  I141\nGCF_000970665.2 Streptococcus gordonii  IE35\n.\n.\n.\nBonus: Redirect your command output to a file with the &gt; command.\nncbi-genome-download -F fasta --genera \"Streptococcus\" -n bacteria &gt; ~/pan_workshop/data/streptococcus_available_genomes.txt\n\n\n\n\n\n\n\nReferences\nhttps://carpentries-incubator.github.io/pangenomics/02-downloading-genomes/index.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Descarga y exploraci√≥n de datos</span>"
    ]
  },
  {
    "objectID": "Cap3.html",
    "href": "Cap3.html",
    "title": "4¬† Anotaci√≥n",
    "section": "",
    "text": "5 Annotating Genomic Data",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Anotaci√≥n</span>"
    ]
  },
  {
    "objectID": "Cap3.html#annotating-genomes",
    "href": "Cap3.html#annotating-genomes",
    "title": "4¬† Anotaci√≥n",
    "section": "5.1 Annotating genomes",
    "text": "5.1 Annotating genomes\nAnnotation is the process of identifying the coordinates of genes and all the coding regions in a genome and determining what proteins are produced from them. In order to do this, an unknown sequence is enriched with information relating to genomic position, regulatory sequences, repeats, gene names, and protein products. This information is stored in genomic databases to help future analysis processing of new data.\nProkka is a command-line software tool created in Perl to annotate bacterial, archaeal and viral genomes and reproduce standards-compliant output files. It requires preassembled genomic DNA sequences in FASTA format as input file, which is the only mandatory parameter to the software. For annotation, Prokka relies on external features and databases to identify the genomic features within the contigs.\n\n\n\nTool (reference)\nFeatures predicted\n\n\n\n\nProdigal (Hyatt 2010)\nCoding Sequences (CDS)\n\n\nRNAmmer (Lagesen et al., 2007)\nRibosomal RNA genes (rRNA)\n\n\nAragorn (Laslett and Canback, 2004)\nTransfer RNA genes\n\n\nSignalP (Petersen et al., 2011)\nSignal leader peptides\n\n\nInfernal (Kolbe and Eddy, 2011)\nNon-coding RNAs\n\n\n\nProtein coding genes are annotated in two stages. Prodigal identifies the coordinates of candidate genes, but does not describe the putative gene product. Usually, in order to predict what a gene encodes for, it is compared with a large database of known sequences, usually at the protein level, and transferred the annotation of the best significant match. Prokka uses this method but in a hierarchical manner. It starts with a small trustworthy database, it then moves to medium sized but domain-specific databases and finally curated models of protein families.\nIn this lesson, we‚Äôll annotate the FASTA files we have downloaded in the previous lesson. First, we need to create a new directory where our annotated genomes will be.\n$ mkdir -p ~/pan_workshop/results/annotated/\n$ cd ~/pan_workshop/results/annotated/\n$ conda deactivate\n$ conda activate /miniconda3/envs/Prokka_Global\nOnce inside the environment, we are ready to run our first annotation.\n(Prokka_Global) $\nIn this example, we will use the following options:\n\n\n\n\n\n\n\nCode\nMeaning\n\n\n\n\n‚Äìprefix\nFilename output prefix [auto] (default ‚Äô‚Äô)\n\n\n‚Äìoutdir\nOutput folder [auto] (default ‚Äô‚Äô)\n\n\n‚Äìkingdom\nAnnotation mode: Archaea Bacteria Mitochondria Viruses (default ‚ÄòBacteria‚Äô)\n\n\n‚Äìgenus\nGenus name (default ‚ÄòGenus‚Äô)\n\n\n‚Äìstrain\nStrain name (default ‚Äòstrain‚Äô)\n\n\n‚Äìusegenus\nUse genus-specific BLAST databases (needs ‚Äìgenus) (default OFF)\n\n\n‚Äìaddgens\nAdd ‚Äògene‚Äô features for each ‚ÄòCDS‚Äô feature (default OFF)\n\n\n\n$ prokka --prefix agalactiae_515_prokka --outdir agalactiae_515_prokka --kingdom Bacteria --genus Streptococcus --species agalactiae --strain 515 --usegenus --addgenes ~/pan_workshop/data/agalactiae_515/GCF_012593885.1_ASM1259388v1_genomic.fna\nThis command takes about a minute to run, printing a lot of information on the screen while doing so. After finishing, Prokka will create a new folder, inside of which, if you run the tree command, you will find the following files:\ntree\n\n\n\n\n\n\nOutput\n\n\n\n.\n‚îî‚îÄ‚îÄ agalactiae_515_prokka\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.err\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.faa\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.ffn\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.fna\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.fsa\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.gbk\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.gff\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.log\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.sqn\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.tbl\n    ‚îú‚îÄ‚îÄ agalactiae_515_prokka.tsv\n    ‚îî‚îÄ‚îÄ agalactiae_515_prokka.txt\n\n1 directory, 12 files\n\n\nWe encourage you to explore each output. The following table describes the contents of each output file:\n\n\n\n\n\n\n\nExtension\nDescription\n\n\n\n\n.gff\nThis is the master annotation in GFF3 format, containing both sequences and annotations. It can be viewed directly in Artemis or IGV.\n\n\n.gbk\nThis is a standard GenBank file derived from the master .gff. If the input to Prokka was a multi-FASTA, then this will be a multi-GenBank, with one record for each sequence.\n\n\n.fna\nNucleotide FASTA file of the input contig sequences.\n\n\n.faa\nProtein FASTA file of the translated CDS sequences.\n\n\n.ffn\nNucleotide FASTA file of all the prediction transcripts (CDS, rRNA, tRNA, tmRNA, misc_RNA).\n\n\n.sqn\nAn ASN1 format ‚ÄúSequin‚Äù file for submission to GenBank. It needs to be edited to set the correct taxonomy, authors, related publications etc.\n\n\n.fsa\nNucleotide FASTA file of the input contig sequences, used by ‚Äútbl2asn‚Äù to create the .sqn file. It is almost the same as the .fna file but with extra Sequin tags in the sequence description lines.\n\n\n.tbl\nFeature Table file, used by ‚Äútbl2asn‚Äù to create the .sqn file.\n\n\n.err\nUnacceptable annotations - the NCBI discrepancy report.\n\n\n.log\nContains all the output that Prokka produced during its run. This is the record of the used settings, even if the --quiet option was enabled.\n\n\n.txt\nStatistics related to the found annotated features.\n\n\n.tsv\nTab-separated file of all features: locus_tag, ftype, len_bp, gene, EC_number, COG, product.\n\n\n\nParameters can be modified as much as needed regarding the organism, the gene, and even the locus tag you are looking for.\n\n\n\n\n\n\nExercise 1(Begginer): Inspecting the GBK\n\n\n\nOpen the gbk output file and carefully explore the information it contains. Which of the following statements is TRUE?\na) Prokka translates every single gene to its corresponding protein, even if the gene isn‚Äôt a coding one.\nb) Prokka can find all kinds of protein-coding sequences, not just the ones that have been identified or cataloged in a database.\nc) Prokka identifies tRNA genes but doesn‚Äôt mention the anticodon located on the tRNAs.\nd) Prokka doesn‚Äôt provide the positions in which a feature starts or ends.\ne) The coding sequences are identified with the CDS acronym in the FEATURES section of each LOCUS.\n\n\n\n\n\n\nSolution\n\n\n\n\n\na) FALSE. Prokka successfully identifies non-coding sequences and doesn‚Äôt translate them. Instead, it provides alternative information (e.g.¬†if it‚Äôs a rRNA gene, it tells if it‚Äôs 5S, 16S, or 23S).\nb) TRUE. Some coding sequences produce proteins that are marked as ‚Äúhypothetical‚Äù, meaning that they haven‚Äôt been yet identified but seem to show properties of a coding sequence.\nc) FALSE. Every tRNA feature has a /note subsection mentioning between parentheses the anticodon located on the tRNA.\nd) FALSE. Right next to each feature, there‚Äôs a pair of numbers indicating the starting and ending position of the corresponding feature.\ne) TRUE. Each coding sequence is identified by the CDS acronym on the left and information such as coordinates, gene name, locus tag, product description and translation on the right.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Anotaci√≥n</span>"
    ]
  },
  {
    "objectID": "Cap3.html#annotating-multiple-genomes",
    "href": "Cap3.html#annotating-multiple-genomes",
    "title": "4¬† Anotaci√≥n",
    "section": "5.2 Annotating multiple genomes",
    "text": "5.2 Annotating multiple genomes\nNow that we know how to annotate genomes with Prokka we can annotate all of the S. agalactiae in one run. For this purpose, we will use a complex while loop that, for each of the S. agalactiae genomes, first extracts the strain name and saves it in a variable, and then uses it inside the Prokka command.\nTo get the strain names easily we will update our TettelinList.txt to add the strain names that it does not have and change the problematic name of the strain 2603V/R. We could just open the file in nano and edit it, but we will do it by coding the changes.\nWith echo we will add each strain name in a new line, and with sed we will remove the characters /R of the problematic strain name.\n$ cd ~/pan_workshop/data/\n$ echo \"18RS21\" &gt;&gt; TettelinList.txt \n$ echo \"H36B\" &gt;&gt; TettelinList.txt\n$ echo \"515\" &gt;&gt; TettelinList.txt \n$ sed -i 's/\\/R//' TettelinList.txt\n$ cat TettelinList.txt\n\n\n\n\n\n\nOutput\n\n\n\nA909  \nCOH1  \nCJB111 \nNEM316\n2603V\n18RS21\nH36B\n515\n\n\nWe can now run Prokka on each of these strains. Since the following command can take up to 8 minutes to run we will use a screen session to run it. The screen session will not have the conda environment activated, so let‚Äôs activate it again.\nscreen -R prokka\nconda activate /miniconda3/envs/Prokka_Global\n$ cat TettelinList.txt | while read line\ndo \nprokka agalactiae_$line/*.fna --kingdom Bacteria --genus Streptococcus --species agalactiae \\\n--strain $line --usegenus --addgenes --prefix Streptococcus_agalactiae_${line}_prokka \\\n--outdir ~/pan_workshop/results/annotated/Streptococcus_agalactiae_${line}_prokka\ndone\nClick Ctrl+ a + d to detach from the session and wait until it finishes the run.\n\n\n\n\n\n\nGenome annotation services\n\n\n\nTo learn more about Prokka you can read Seemann T. 2014. Other valuable web-based genome annotation services are RAST and PATRIC. Both provide a web-based user interface where you can store your private genomes and share them 4 with your colleagues. If you want to use RAST as a command-line tool you can try the docker container myRAST.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Anotaci√≥n</span>"
    ]
  },
  {
    "objectID": "Cap3.html#curating-prokka-output-files",
    "href": "Cap3.html#curating-prokka-output-files",
    "title": "4¬† Anotaci√≥n",
    "section": "5.3 Curating Prokka output files",
    "text": "5.3 Curating Prokka output files\nNow that we have our genome annotations, let‚Äôs take a look at one of them. Fortunately, the gbk files are human-readable and we can look at a lot of the information in the first few lines:\n$ cd ../results/annotated/\n$ head Streptococcus_agalactiae_18RS21_prokka/Streptococcus_agalactiae_18RS21_prokka.gbk\n\n\n\n\n\n\nOutput\n\n\n\n\nLOCUS AAJO01000553.1 259 bp DNA linear 22-FEB-2023 DEFINITION Streptococcus agalactiae strain 18RS21. ACCESSION VERSION KEYWORDS . SOURCE Streptococcus agalactiae ORGANISM Streptococcus agalactiae Unclassified. COMMENT Annotated using prokka 1.14.6 from https://github.com/tseemann/prokka.\n\n\nWe can see that in the ORGANISM field we have the word ‚ÄúUnclassified‚Äù. If we compare it to the gbk file for the same strain, that came with the original data folder (which was obtained from the NCBI) we can see that the strain code should be there.\n$ head ../../data/agalactiae_18RS21/Streptococcus_agalactiae_18RS21.gbk\n\n\n\n\n\n\nOutput\n\n\n\nLOCUS       AAJO01000169.1          2501 bp    DNA     linear   UNK \nDEFINITION  Streptococcus agalactiae 18RS21\nACCESSION   AAJO01000169.1\nKEYWORDS    .\nSOURCE      Streptococcus agalactiae 18RS21.\n  ORGANISM  Streptococcus agalactiae 18RS21\n            Bacteria; Terrabacteria group; Firmicutes; Bacilli;\n            Lactobacillales; Streptococcaceae; Streptococcus; Streptococcus\n            agalactiae.\nFEATURES             Location/Qualifiers\n\n\nThis difference could be a problem since some bioinformatics programs could classify two different strains within the same ‚ÄúUnclassified‚Äù group. For this reason, Prokka‚Äôs output files need to be corrected before moving forward with additional analyses.\nTo do this ‚Äúmanual‚Äù curation we will use the script correct_gbk.sh. Let‚Äôs first make a directory for the scripts, and then use of nano text editor to create your file.\n$ mkdir ../../scripts\n$ nano ../../scripts/correct_gbk.sh\nPaste the following content in your script:\n#This script will change the word Unclassified from the ORGANISM lines by that of the respective strain code.\n# Usage: sh correct_gbk.sh &lt;gbk-file-to-edit&gt;\nfile=$1   # gbk file annotated with prokka\nstrain=$(grep -m 1 \"DEFINITION\" $file |cut -d \" \" -f6,7) # Create a variable with the columns 6 and 7 from the DEFINITION line.\n\nsed -i '/ORGANISM/{N;s/\\n//;}' $file # Put the ORGANISM field on a single line.\n\nsed -i \"s/\\s*Unclassified./ $strain/\" $file # Substitute the word \"Unclassified\" with the value of the strain variable.\nPress Ctrl + X to exit the text editor and save the changes. This script allows us to change the term ‚ÄúUnclassified.‚Äù from the rows ORGANISM with that of the respective strain.\nNow, we need to run this script for all the gbk files:\n$ ls */*.gbk | while read file\ndo \nbash ../../scripts/correct_gbk.sh $file\ndone\nFinally, let‚Äôs view the result:\n$ head Streptococcus_agalactiae_18RS21_prokka/Streptococcus_agalactiae_18RS21_prokka.gbk\n\n\n\n\n\n\nOutput\n\n\n\nLOCUS       AAJO01000553.1           259 bp    DNA     linear       27-FEB-2023\nDEFINITION  Streptococcus agalactiae strain 18RS21.\nACCESSION   \nVERSION\nKEYWORDS    .\nSOURCE      Streptococcus agalactiae\n  ORGANISM  Streptococcus agalactiae 18RS21.\nCOMMENT     Annotated using prokka 1.14.6 from\n            https://github.com/tseemann/prokka.\nFEATURES             Location/Qualifiers\n\n\nVoil√†! Our gbk files now have the strain code in the ORGANISM line.\n\n\n\n\n\n\nExercise 2(Intermediate): Counting coding sequences\n\n\n\n\nBefore we build our pangenome it can be useful to take a quick look at how many coding sequences each of our genomes have. This way we can know if they have a number close to the expected one (if we have some previous knowledge of our organism of study).\nUse your grep, looping, and piping abilities to count the number of coding sequences in the gff files of each genome.\nNote: We will use the gff file because the gbk contains the aminoacid sequences, so it is possible that with the grep command we find the string CDS in these sequences, and not only in the description of the features. The gff files also have the description of the features but in a different format.\n\n\n\n\n\n\n\nImportant\n\n\n\n\n\nFirst inspect a gff file to see what you are working with. Open it with nano and scroll through the file to see its contents.\nnano Streptococcus_agalactiae_18RS21_prokka/Streptococcus_agalactiae_18RS21_prokka.gff\nNow make a loop that goes through every gff finding and counting each line with the string ‚ÄúCDS‚Äù.\n&gt; for genome in */*.gff\n&gt; do \n&gt; echo $genome # Print the name of the file\n&gt; grep \"CDS\" $genome | wc -l # Find the lines with the string \"CDS\" and pipe that to the command wc with the flag -l to count the lines\n&gt; done\n\n\n\n\n\n\nOutput\n\n\n\nStreptococcus_agalactiae_18RS21_prokka/Streptococcus_agalactiae_18RS21_prokka.gff\n1960\nStreptococcus_agalactiae_2603V_prokka/Streptococcus_agalactiae_2603V_prokka.gff\n2108\nStreptococcus_agalactiae_515_prokka/Streptococcus_agalactiae_515_prokka.gff\n1963\nStreptococcus_agalactiae_A909_prokka/Streptococcus_agalactiae_A909_prokka.gff\n2067\nStreptococcus_agalactiae_CJB111_prokka/Streptococcus_agalactiae_CJB111_prokka.gff\n2044\nStreptococcus_agalactiae_COH1_prokka/Streptococcus_agalactiae_COH1_prokka.gff\n1992\nStreptococcus_agalactiae_H36B_prokka/Streptococcus_agalactiae_H36B_prokka.gff\n2166\nStreptococcus_agalactiae_NEM316_prokka/Streptococcus_agalactiae_NEM316_prokka.gff\n2139\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnnotating your assemblies\n\n\n\n\nf you work with your own assembled genomes, other problems may arise when annotating them. One likely problem is that the name of your contigs is very long, and since Prokka will use those names as the LOCUS names, the LOCUS names may turn out problematic.\nExample of contig name:\nNODE_1_length_44796_cov_57.856817\nResult of LOCUS name in gbk file:\nLOCUS       NODE_1_length_44796_cov_57.85681744796 bp   DNA linear\nHere the coverage and the length of the locus are fused, so this will give problems downstream in your analysis.\nThe tool anvi-script-reformat-fasta can help you simplify the names of your assemblies and do other magic, such as removing the small contigs or sequences with too many gaps.\nanvi-script-reformat-fasta my_new_assembly.fasta -o my_reformated_assembly.fasta --simplify-names\nThis will convert &gt;NODE_1_length_44796_cov_57.856817 into &gt;c_000000000001 and the LOCUS name into LOCUS c_000000000001 44796 bp DNA linear.\nProblem solved!",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Anotaci√≥n</span>"
    ]
  },
  {
    "objectID": "Cap3.html#annotating-antibiotic-resistance",
    "href": "Cap3.html#annotating-antibiotic-resistance",
    "title": "4¬† Anotaci√≥n",
    "section": "5.4 Annotating antibiotic resistance",
    "text": "5.4 Annotating antibiotic resistance\nWhereas Prokka is useful to identify all kinds of genomic elements, other more specialized pipelines are also available. For example, antiSMASH searches genomes for biosynthetic gene clusters, responsible for the production of secondary metabolites. Another pipeline of interest is RGI: the Resistance Gene Identifier. This program allows users to predict genes and SNPs which confer antibiotic resistance to an organism. It is a very complex piece of software subdivided into several subprograms; RGI main, for instance, is used to annotate contigs, and RGI bwt, on the other hand, annotates reads. In this lesson, we‚Äôll learn how to use RGI main. To use it, first activate its virtual environment:\n$ conda activate /miniconda3/envs/rgi/\nYou can type rgi --help to list all subprograms that RGI provides. In order to get a manual of a specific subcommand, type rgi [command] --help, replacing [command] with your subprogram of interest. Before you do anything with RGI, however, you must download CARD (the Comprehensive Antibiotic Resistance Database), which is used by RGI as reference. To do so, we will use wget and one of the subcommands of RGI, rgi load, as follows:\n$ cd ~/pan_workshop/data/\n$ wget -O card_archive.tar.gz https://card.mcmaster.ca/latest/data\n$ tar -xf card_archive.tar.gz ./card.json\n$ rgi load --local -i card.json\n$ rm card_archive.tar.gz card.json\nAfter performing this sequence of commands, you‚Äôll find a directory called localDB/ in your current working directory. Its location and name are extremely important: you must always run RGI inside the parent directory of localDB/ (which, in our case, is ~/pan_workshop/data/), and you shall not rename localDB/ to anything else. RGI will fail if you don‚Äôt follow these rules.\nAs we‚Äôll be using RGI main, write rgi main --help and take a moment to read through the help page. The parameters we‚Äôll be using in this lesson are:\n\n-i or --input_sequence. Sets the genomic sequence (in fasta or fasta.gz format) we want to annotate.\n-o or --output_file. Specifies the basename for the two output files RGI produces; for example, if you set this option to outputs, you‚Äôll get two files: outputs.json and outputs.txt.\n--include_loose. When not using this option, RGI will only return hits with strict boundaries; on the other hand, if provided, RGI will also include hits with loose boundaries.\n--local. Tells RGI to use the database stored in localDB/.\n--clean. Removes temporary files created by RGI.\n\nWe are now going to create a new directory for RGI main‚Äôs outputs:\n$ mkdir -p ../results/resistomes/\nNext, let‚Äôs see how we would find the resistance genes in the 18RS21 strain of S. agalactiae:\n$ rgi main --clean --local --include_loose \\\n&gt; -i agalactiae_18RS21/Streptococcus_agalactiae_18RS21.fna \\\n&gt; -o ../results/resistomes/agalactiae_18RS21\nRecall that RGI produces two output files; let‚Äôs have a look at them:\n$ cd ../results/resistomes/\n$ ls\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_18RS21.json\nagalactiae_18RS21.txt\n\n\nThe JSON file stores the complete output whereas the .TXT file contains a subset of this information. However, the former isn‚Äôt very human-readable, and is mostly useful for downstream analyses with RGI; the latter, on the contrary, has everything we might need in a ‚Äúfriendlier‚Äù format. This file is tab-delimited, meaning that it is a table file which uses the tab symbol as separator. Have a look at the file by running less -S agalactiae_18RS21.txt; use the arrow keys to move left and right. A detailed description of the meaning of each column can be found in the table below (taken from RGI‚Äôs documentation):\n\n\n\n\n\n\n\n\nColumn\nField\nContents\n\n\n\n\n1\nORF_ID\nOpen Reading Frame identifier (internal to RGI)\n\n\n2\nContig\nSource Sequence\n\n\n3\nStart\nStart co-ordinate of ORF\n\n\n4\nStop\nEnd co-ordinate of ORF\n\n\n5\nOrientation\nStrand of ORF\n\n\n6\nCut_Off\nRGI Detection Paradigm (Perfect, Strict, Loose)\n\n\n7\nPass_Bitscore\nStrict detection model bitscore cut-off\n\n\n8\nBest_Hit_Bitscore\nBitscore value of match to top hit in CARD\n\n\n9\nBest_Hit_ARO\nARO term of top hit in CARD\n\n\n10\nBest_Identities\nPercent identity of match to top hit in CARD\n\n\n11\nARO\nARO accession of match to top hit in CARD\n\n\n12\nModel_type\nCARD detection model type\n\n\n13\nSNPs_in_Best_Hit_ARO\nMutations observed in the ARO term of top hit in CARD (if applicable)\n\n\n14\nOther_SNPs\nMutations observed in ARO terms of other hits indicated by model id (if applicable)\n\n\n15\nDrug Class\nARO Categorization\n\n\n16\nResistance Mechanism\nARO Categorization\n\n\n17\nAMR Gene Family\nARO Categorization\n\n\n18\nPredicted_DNA\nORF predicted nucleotide sequence\n\n\n19\nPredicted_Protein\nORF predicted protein sequence\n\n\n20\nCARD_Protein_Sequence\nProtein sequence of top hit in CARD\n\n\n21\nPercentage Length of Reference Sequence\n(length of ORF protein / length of CARD reference protein)\n\n\n22\nID\nHSP identifier (internal to RGI)\n\n\n23\nModel_id\nCARD detection model id\n\n\n24\nNudged\nTRUE = Hit nudged from Loose to Strict\n\n\n25\nNote\nReason for nudge or other notes\n\n\n26\nHit_Start\nStart co-ordinate for HSP in CARD reference\n\n\n27\nHit_End\nEnd co-ordinate for HSP in CARD reference\n\n\n28\nAntibiotic\nARO Categorization\n\n\n\nWhen viewing wide tab-delimited files like this one, it might be useful to look at them one column at a time, which can be accomplished with the cut command. For example, if we wanted to look at the Drug Class field (which is the 15th column), we would write the following:\n$ cut -f 15 agalactiae_18RS21.txt | head\n\n\n\n\n\n\nOutput\n\n\n\nDrug Class carbapenem mupirocin-like antibiotic phenicol antibiotic macrolide antibiotic macrolide antibiotic; tetracycline antibiotic; disinfecting agents and antiseptics diaminopyrimidine antibiotic carbapenem phenicol antibiotic carbapenem; cephalosporin; penam\n\n\n\n\n\n\n\n\nExercise 3(Intermediate): The most abundant resistance mechanisms\n\n\n\nComplete the following bash command to get the counts of each unique resistance mechanism. Which one is the abundant?\n$ cut -f ____ agalactiae_18RS21.txt | tail +2 | ____ | ____\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThe resistance mechanism is the 16th column, so we should pass the number 16 to cut -f. The tail +2 part simply removes the header row. Next, we should sort the rows using sort, and, finally, count each occurrence with uniq -c. Thus, we get the following command:\n$ cut -f 16 agalactiae_18RS21.txt | tail +2 | sort | uniq -c\n\n\n\n\n\n\nOutput\n\n\n\n 574 antibiotic efflux\n      7 antibiotic efflux; reduced permeability to antibiotic\n    697 antibiotic inactivation\n    342 antibiotic target alteration\n     11 antibiotic target alteration; antibiotic efflux\n      2 antibiotic target alteration; antibiotic efflux; reduced permeability to antibiotic\n     12 antibiotic target alteration; antibiotic target replacement\n    170 antibiotic target protection\n     49 antibiotic target replacement\n     24 reduced permeability to antibiotic\n      2 resistance by host-dependent nutrient acquisition\nFrom here, we can see that the antibiotic inactivation mechanism is the most abundant.\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 4(Advanced): Annotating antibiotic resistance of multiple genomes\n\n\n\nFill in the blanks in the following bash loop in order to annotate each of the eight genomes with RGI main and save outputs into ~/pan_workshop/results/resistomes/. The basenames of the output files must have the form agalactiae_[strain], where [strain] shall be replaced with the corresponding strain.\n$ cd ~/pan_workshop/data/\n$ cat TettelinList.txt | while read strain; do\n&gt; rgi main --clean --local --include_loose \\\n&gt; -i ___________________________ \\\n&gt; -o ___________________________\n&gt; done\nTo check your answer, confirm that you get the same output when running the following:\n$ ls ~/pan_workshop/results/resistomes/\n\n\n\n\n\n\nOutput\n\n\n\nagalactiae_18RS21.json  agalactiae_515.json   agalactiae_CJB111.json  agalactiae_H36B.json\nagalactiae_18RS21.txt   agalactiae_515.txt    agalactiae_CJB111.txt   agalactiae_H36B.txt\nagalactiae_2603V.json   agalactiae_A909.json  agalactiae_COH1.json    agalactiae_NEM316.json\nagalactiae_2603V.txt    agalactiae_A909.txt   agalactiae_COH1.txt     agalactiae_NEM316.txt\n\n\nBonus: Notice that this command will execute RGI main even if the outputs already exist. How would you modify this script so that already processed files are skipped?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nBecause TettelinList.txt only stores strains, we must write the complete name by appending agalactiae_ before the strain variable and the corresponding file extensions. As such, we get the following command:\n$ cd ~/pan_workshop/data/\n$ cat TettelinList.txt | while read strain; do\n&gt; rgi main --clean --local --include_loose \\\n&gt; -i agalactiae_$strain/*.fna \\\n&gt; -o ../results/resistomes/agalactiae_$strain\n&gt; done\nBonus: In order to skip already processed files, we can add a conditional statement which tests for the existence of one of the output files, and run the command if this test fails. We‚Äôll use the .txt file for this check. Recall that to test for the existence of a file, we use the following syntax: if [ -f path/to/file ]; taking this into account, we can now build our command:\n$ cd ~/pan_workshop/data/\n$ cat TettelinList.txt | while read strain; do\n&gt; if [ -f ../results/resistomes/agalactiae_$strain.txt ]; then\n&gt; echo \"Skipping $strain\"\n&gt; else\n&gt; echo \"Annotating $strain\"\n&gt; rgi main --clean --local --include_loose \\\n&gt; -i agalactiae_$strain/*.fna \\\n&gt; -o ../results/resistomes/agalactiae_$strain \\\n&gt; fi\n&gt; done\n\n\n\n\n\n\n\n\n\n\n\nUnleashing the power of the command line: building presence-absence tables from RGI main outputs\n\n\n\n\nBash is a powerful and flexible language; as an example of the possibilities that it enables, we will create a presence-absence table from our RGI results. This kind of table stores the presence or absence of features in a set of individuals. Each cell may contain a 1 if the feature is present or a 0 otherwise. In our case, each column will correspond to a genome, and each row to an ARO, which is a unique identifier for resistance genes.\nFirst, let‚Äôs create the script and grant it the permission to execute:\n$ touch create-rgi-presence-table.sh\n$ chmod +x create-rgi-presence-table.sh\nNext, open the script with any text editor and copy the following code into it. Several comments have been added throughout the script to make it clear what is being done at each step. Links to useful articles detailing specific Bash scripting tools are also provided.\n#!/bin/bash\n\n# Set \"Bash Strict Mode\". [1]\nset -euo pipefail\nIFS=$'\\n\\t'\n\n# Show help message when no arguments are passed and exit. [2]\nif [ $# -lt 1 ]; then\n  echo \"Usage: $0 [TXT FILES] &gt; [OUTPUT TSV FILE]\" &gt;&2\n  echo Create a presence-absence table from RGI main txt outputs. &gt;&2\n  exit 1\nfi\n\n# Output table parts.\nheader=\"aro\"\ntable=\"\"\n\n# For each passed file. [2]\nfor file in $@; do\n\n  # Add column name to header.\n  header=$header'\\t'$(basename $file .txt)\n\n  # List file's AROs and append the digit 1 at the right of each line. [3]\n  aros=$(cut -f 11 $file | tail +2 | sort | uniq | sed 's/$/ 1/')\n\n  # Join the AROs into table, fill missing values with zeroes. [4] [5]\n  table=$(join -e 0 -a 1 -a 2 &lt;(echo \"${table}\") &lt;(echo \"${aros}\") -o auto)\n\ndone\n\n# Print full tab-delimited table.\necho -e \"${header}\"\necho \"${table}\" | tr ' ' '\\t' | tail +2\n\n# Useful links:\n# [1] More info about the \"Bash Strict Mode\":\n#     http://redsymbol.net/articles/unofficial-bash-strict-mode/\n# [2] Both $# and $@ are examples of special variables. Learn about them here:\n#     https://linuxhandbook.com/bash-special-variables/\n# [3] Sed is a powerful text processing tool. Get started here:\n#     https://www.geeksforgeeks.org/sed-command-in-linux-unix-with-examples/\n# [4] Learn how to use the join command from this source:\n#     https://www.ibm.com/docs/ro/aix/7.2?topic=j-join-command\n# [5] The &lt;(EXPRESSION) notation is called process substitution, used here\n#     because the join command only accepts files. Learn more from here:\n#     https://medium.com/factualopinions/process-substitution-in-bash-739096a2f66d\nFinally, you can run this script by passing the eight .txt files we obtained from Exercise 4 as arguments:\n$ ./create-rgi-presence-table.sh ~/pan_workshop/results/resistomes/*.txt &gt; agalactiae_rgi_presence.tsv\n\n\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nProkka is a command line utility that provides rapid prokaryotic genome annotation.\nSometimes we need manual curation of the output files of the software.\nSpecialized software exist to perform annotation of specific genomic elements.\n\n\n\nReferences\nhttps://carpentries-incubator.github.io/pangenomics/03-annotation-with-Prokka/index.html#annotating-antibiotic-resistance",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Anotaci√≥n</span>"
    ]
  },
  {
    "objectID": "Cap4.html",
    "href": "Cap4.html",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "",
    "text": "5.1 Introduction to Genome Mining",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#introduction-to-genome-mining",
    "href": "Cap4.html#introduction-to-genome-mining",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "",
    "text": "5.1.1 What is Genome Mining?\n\nIn bioinformatics, genomic mining is defined as the computational analysis of nucleotide sequence data based on the comparison and recognition of conserved patterns. Under this definition, any computational method that involves searching for and predicting physiological or metabolic properties is considered part of genomic mining. The specific focus of genomic mining, when applied to natural products (NPs), is centered on the identification of biosynthetic gene clusters (BGCs) of NPs.\nNatural products (NPs) are low molecular weight organic molecules that encompass a wide and diverse range of chemical entities with multiple biological functions. These molecules can be produced by bacteria, fungi, plants, and animals. Natural products (NPs) thus play various roles that can be analyzed from two main perspectives:\n\nBiological function: This refers to the role the molecule plays in the producing organism.\nAnthropocentric function: This focuses on the utility of NPs for humans, including their use in medicine, agriculture, and other areas.\n\n\nCurrently, more than 126,000 NPs are known to originate from various sources and are classified into six main groups. These groups are defined based on their chemical structure, the enzymes involved in their synthesis, the precursors used, and the final modifications they undergo.\n\n\n\n\n\n\n\n\nClass\nDescription\nExample\n\n\n\n\nPolyketides (PKs)\nPolyketides are organic molecules characterized by a repetitive chain of ketone (&gt;C=O) and methylene (&gt;CH2) groups. Their biosynthesis is similar to fatty acid synthesis, which is crucial to their diversity. These versatile molecules are found in bacteria, fungi, plants, and marine organisms. Notable examples include erythromycin, an antibiotic used to treat respiratory infections, and lovastatin, a lipid-lowering drug that reduces cholesterol. In summary, polyketides have a structure based on the repetition of ketone and methylene groups, with significant medical and pharmacological applications.\nErythromycin\n\n\nNon-Ribosomal Peptides (NRPs)\nNRPs are a family of natural products that differ from ribosomal peptides due to their non-linear synthesis. Their main structure is based on non-ribosomal modules, which include three key domains: Adenylation, acyl carrier, and condensation domain. Relevant examples include Daptomycin, an antibiotic widely used in various infections. Its NRP structure contributes to its antimicrobial activity. Cyclosporine is an immunosuppressant used in organ transplants. Its NRP structure is crucial to its function. In summary, NRPs feature a non-linear modular structure and play a significant role in medicine and chemical biology.\nDaptomycin\n\n\nRibosomally synthesized and Post-translationally modified Peptides (RiPPs)\nRiPPs are a diverse class of natural products of ribosomal origin. These peptides are produced in the ribosomes and then undergo enzymatic modifications after their synthesis. Historically, RiPPs were studied individually, but in 2013, uniform naming guidelines were established for these natural products. RiPPs include examples such as Microcin J25, an antibacterial RiPP produced by Escherichia coli, and Nisin, an antimicrobial RiPP produced by Lactococcus lactis. Their diversity and applications continue to be the subject of ongoing research.\nNisin\n\n\nSaccharides\nSaccharides produced in bacterial secondary metabolism are molecules synthesized by various mechanisms and then undergo subsequent enzymatic modifications based on the addition of carbohydrates. Two notable examples are Kanamycin, an aminoglycoside produced by Streptomyces kanamyceticus, used to treat bacterial infections, and Streptomycin, another aminoglycoside produced by Streptomyces griseus, which was one of the first antibiotics used to treat tuberculosis. Although their use has decreased due to bacterial resistance, they remain important in some cases.\nKanamycin\n\n\nTerpenes\nTraditionally, terpenes have been considered derivatives of 2-methyl-butadiene, better known as isoprene. Although they have been related to isoprene, terpenes do not directly derive from isoprene, as it has never been found as a natural product. The true precursor of terpenes is mevalonic acid, which comes from acetyl coenzyme A. Terpenes originate through the enzymatic polymerization of two or more isoprene units, assembled and modified in many different ways. Most terpenes have multicentric structures that differ not only in functional group but also in their basic carbon skeleton. These compounds are the main constituent of the essential oils of some plants and flowers, such as lemon and orange trees. They serve various functions in plants, such as being part of chlorophyll, carotenoid pigments, gibberellin and abscisic acid hormones, and increasing the fixation of proteins to cell membranes through isoprenylation. Additionally, terpenes are used in traditional medicine, aromatherapy, and as potential pharmacological agents. Two notable examples of terpenes are limonene, present in citrus peels and used in perfumery and cleaning products, and hopanoids, pentacyclic compounds similar to sterols, whose main function is to confer rigidity to the plasma membrane in prokaryotes.\nDiplopterol\n\n\nAlkaloids\nAlkaloids are a class of natural, basic organic compounds that contain at least one nitrogen atom. They are mainly derived from amino acids and are characterized by their water solubility in acidic pH and solubility in organic solvents at alkaline pH. These compounds are found in various organisms, such as plants, fungi, and bacteria. Alkaloids have a wide range of pharmacological activities, such as Quinine, used against malaria, and Ephedrine, a bronchodilator. Additionally, some alkaloids, such as BE-54017, have an unusual structure, as it presents an indenotryptoline skeleton, rarely observed in other bis-indoles; however, its specific application is not well documented.\nBE-54017",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#genome-mining-aims-to-find-bgcs",
    "href": "Cap4.html#genome-mining-aims-to-find-bgcs",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.2 Genome mining aims to find BGCs",
    "text": "5.2 Genome mining aims to find BGCs\nNatural products are encoded in Biosynthetic Gene Clusters (BGCs) in Bacteria. These BGCs are clusters of genes generally placed together in the same genome region. These include the genes encoding the biosynthetic enzymes and those related to the metabolite‚Äôs transport or resistance against antibacterial metabolites. Most BGCs are composed of several types of genes, so genome mining is based on the identification of these genes in a genome.\n\nEach class of biosynthetic gene clusters (BGCs) is distinguished by the types of essential and accessory genes it contains. The most common classes of BGCs for natural products include polyketide synthases (PKSs), non-ribosomal peptide synthetases (NRPSs), ribosomally synthesized and post-translationally modified peptides (RiPPs), and terpenes. For example, non-ribosomal peptides (NRPs) are a class of metabolites characterized by the assembly of amino acid residues or their derivatives, with non-ribosomal peptide synthetases being the enzymes responsible for assembling these molecules. NRPSs are large enzymes organized into modules and domains, similar to other common classes of BGCs. Below, we show you an animation created by Michael W. Mullowney of the biosynthesis of a fictitious NP called ‚Äúfakeomycin‚Äù, which is of the NRPS class with a cyclization domain.\n\nGenome mining consists in analyzing genomes with specialized algorithms designed to find some BGCs. Chemists in the last century diligently characterized some of these clusters. We have extensive databases that contain information about which genes belong to which BGCs and some control sets of genes that do not. The use of genome mining methodologies facilitates the prioritization of BGCs for the search of novel metabolites. Since the era of next-generation sequencing, genomes have been explored as a source for discovering new BGCs.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#chloramphenicol-is-a-known-antibiotic-produced-in-a-bgc",
    "href": "Cap4.html#chloramphenicol-is-a-known-antibiotic-produced-in-a-bgc",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.3 Chloramphenicol is a known antibiotic produced in a BGC",
    "text": "5.3 Chloramphenicol is a known antibiotic produced in a BGC\nFor example, let‚Äôs look into the BGC responsible for chloramphenicol biosynthesis. This is a BGC described for the first time in a Streptomyces venezuelae genome.\n\n\n\n\n\n\n\nExercise 1: Sort the Steps to Identify BGCs Similar to Clavulanic Acid\n\n\n\nBelow is a list of steps in disarray that are part of the process of identifying BGCs similar to clavulanic acid. Your task is to logically order them to establish a coherent methodology that allows the effective identification of such BGCs.\nDisordered Steps:\na. Annotate the genes within the identified BGCs to predict their function.\nb. Compare the identified BGCs against databases of known BGCs to find similarities to clavulanic acid.\nc. Extract DNA from samples of interest, such as microorganism-rich soils or specific bacterial cultures.\nd. Conduct phylogenetic analysis of the BGCs to explore their evolutionary relationship.\ne. Use bioinformatics tools to assemble DNA sequences and detect potential BGCs.\nf. Sequence the extracted DNA using next-generation sequencing (NGS) techniques.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#planning-a-genome-mining-project",
    "href": "Cap4.html#planning-a-genome-mining-project",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.4 Planning a genome mining project",
    "text": "5.4 Planning a genome mining project\nHere we will provide tips and tricks to plan and execute a genome mining project. Firstly, choose a set of genomes from taxa. In this lesson we will be working with S. agalactiae genomes (Tettelin et al., 2005). Although this genus is not know for its potential as a Natural products producer, it is good enough to show different approaches to genome mining. Recently, metagenomes have been considered in genome mining studies. Here are some considerations that might be useful as a genome miner:\n\nThink about a research question before starting to analyze the data.\nRemember, raw metadata should remain intact during all genome mining processes. It could be a good idea to change its file permissions to read-only.\nGather as much information as metadata of all the genomes you work with.\nAll your intermediate steps should be considered temporal and may be removed without risk.\nSave your scripts using a version manager, GitHub for example.\nShare your data in public repositories.\nGive time to make your science repeatable and help your community.\n\n\n\n\n\n\n\nDiscussion 1: Describe your project\n\n\n\nWhat are the advantages of documenting your work? Are there other things you can do to make your mining work more reproducible, like commenting on your scripts, etc.?\n\n\n\n\n\n\nsolution\n\n\n\n\n\nDocumenting your work helps others (including your future self) understand what you have done and facilitates troubleshooting. To make your work more reproducible, you can detail the code logic by commenting on your scripts, use version control systems like Git, have backups of your scripts, share your data and code with others to facilitate feedback, and follow standardized workflows or protocols like those taught in this lesson. You can also name your files properly with a consistent format, structure your directories well, and back up your work regularly. Additionally, keeping a log (or ‚Äúbit√°cora‚Äù) can serve as a tutorial for your future self, making it easier to understand your work later on.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#starting-a-genome-mining-project",
    "href": "Cap4.html#starting-a-genome-mining-project",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.5 Starting a genome mining project",
    "text": "5.5 Starting a genome mining project\nOnce you have chosen your set of genomes, you need to annotate the sequences. The process of genome annotation needs two steps. First, a gene calling approach (structural annotation), which looks for CDS or RNAs within the DNA sequences. Once these features have been detected, you need to assign a function for each CDS (functional annotation). This is usually done through comparison against protein databases. There are tens of bioinformatics tools to annotate genomes, but some of the most broadly used are; RAST (Aziz et al.¬†2008), and Prokka (Seeman, 2014). Here, we will start the genome mining lesson with S. agalactiae genomes already annotated by Prokka. You can download this data from this repository. The annotated genomes are written in GeneBank format (extension ‚Äú.gbk‚Äù). To learn more about the basic annotation of genomes, see the lesson named ‚ÄúPangenome Analysis in Prokaryotes: Annotating Genomic Data‚Äù. These files are also accessible in the‚Ä¶ Insert introduction related to the access to the server??",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap4.html#references",
    "href": "Cap4.html#references",
    "title": "5¬† Introducci√≥n a Miner√≠a Gen√≥mica",
    "section": "5.6 References",
    "text": "5.6 References\n\nAziz, R. K., Bartels, D., Best, A. A., DeJongh, M., Disz, T., Edwards, R. A., ‚Ä¶ & Zagnitko, O. (2008). The RAST Server: rapid annotations using subsystems technology. BMC genomics, 9(1), 1-15.\nSeemann, T. (2014). Prokka: rapid prokaryotic genome annotation. Bioinformatics, 30(14), 2068-2069.\nTettelin, H., Masignani, V., Cieslewicz, M. J., Donati, C., Medini, D., Ward, N. L., ‚Ä¶ & Fraser, C. M. (2005). Genome analysis of multiple pathogenic isolates of Streptococcus agalactiae: implications for the microbial ‚Äúpan-genome‚Äù. Proceedings of the National Academy of Sciences, 102(39), 13950-13955.\nNett, Markus (2014). Kinghorn, A. D., ed.¬†Genome Mining: Concept and Strategies for Natural Product Discovery. Springer International Publishing. pp.¬†199-245. ISBN 978-3-319-04900-7. doi:10.1007/978-3-319-04900-7_4.\nKatz, Leonard; Baltz, Richard H. ¬´Natural product discovery: past, present, and future¬ª. Journal of Industrial Microbiology and Biotechnology 43 (2-3): 155-176. ISSN 1476-5535. doi:10.1007/s10295-015-1723-5.\nMej√≠a Ponce, Paulina M.(2017). An√°lisis filogen√©tico de familias de enzimas que utilizan tRNA, indicios para el descubrimiento de productos naturales ocultos en Actinobacteria. Tesis (M.C.)‚ÄìCentro de Investigaci√≥n y de Estudios Avanzados del I.P.N. Unidad Irapuato. Laboratorio Nacional de Gen√≥mica para la Biodiversidad. 2020-08-13T02:57:32Z.\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nNatural products are encoded in Biosynthetic Gene Clusters (BGCs)\nGenome mining describes the exploitation of genomic information with specialized algorithms intended to discover and study BGCs\n\n\n\nReferences\nhttps://carpentries-incubator.github.io/genome-mining/01-introduction/index.html",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Introducci√≥n a Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap5.html",
    "href": "Cap5.html",
    "title": "6¬† Bases de datos de Miner√≠a Gen√≥mica",
    "section": "",
    "text": "6.1 Genome Mining Databases",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Bases de datos de Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap5.html#mibig-database",
    "href": "Cap5.html#mibig-database",
    "title": "6¬† Bases de datos de Miner√≠a Gen√≥mica",
    "section": "6.2 MIBiG Database",
    "text": "6.2 MIBiG Database\nThe Minimum Information about a Biosynthetic Gene cluster MIBiG is a database that facilitates consistent and systematic deposition and retrieval of data on biosynthetic gene clusters. MIBiG provides a robust community standard for annotations and metadata on biosynthetic gene clusters and their molecular products. It will empower next-generation research on the biosynthesis, chemistry and ecology of broad classes of societally relevant bioactive secondary metabolites, guided by robust experimental evidence and rich metadata components.\n\n6.2.1 Browsing and Querying in the MIBiG database\nSelect ‚ÄúSearch‚Äù on the upper right corner of the menu bar\n\nFor simple queries, such as Streptococcus agalactiae or searching for a specific strain you can use the ‚ÄúSimple search‚Äù function.\n\nFor complex queries, the database also provides a sophisticated query builder that allows querying on all antiSMASH annotations. To enable this function, click on ‚ÄúBuild a query‚Äù\n\n\n6.2.2 Results\n\n\n\n\n\n\n\nExercise 1\n\n\n\nEnter to MIBiG and search BGCs from Streptococcus. Search the BGCs that produce the products Thermophilin 1277 and Streptolysin S. Based on the table on MIBiG, which of these organisms has the most complete annotation?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nStreptococcus thermophilus produce Thermophilin 1277 while Streptococcus pyogenes M1 GAS produces Streptolysin S. According to MIBiG metadata Streptolysin S BGC is complete while Thermophilin 1277 is not. So Streptolysin S BGC is better annotated.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Bases de datos de Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap5.html#antismash-database",
    "href": "Cap5.html#antismash-database",
    "title": "6¬† Bases de datos de Miner√≠a Gen√≥mica",
    "section": "6.3 antiSMASH database",
    "text": "6.3 antiSMASH database\nThe antiSMASH database provides an easy to use, up-to-date collection of annotated BGC data. It allows to easily perform cross-genome analyses by offering complex queries on the datasets.\n\n6.3.1 Browsing and Querying in the antiSMASH database\nSelect ‚ÄúBrowse‚Äù on the top menu bar, alternatively you can select ‚ÄúQuery‚Äù in the center\n\nFor simple queries, such as ‚ÄúStreptococcus‚Äù or searching for a specific strain you can use the ‚ÄúSimple search‚Äù function.\n\nFor complex queries, the database also provides a sophisticated query builder that allows querying on all antiSMASH annotations. To enable this function, click on ‚ÄúBuild a query‚Äù\n\nUse antiSMASH database to analyse the BGC contained in the Streptococcus genomes. We‚Äôll use Python to visualize the data. First, import pandas, matplotlib.pyplot and seaborn libraries.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nSecondly, store in a dataframe variable the content of the Streptococcus predicted BGC downloaded from antiSMASH-db.\ndata = pd.read_csv(\"https://raw.githubusercontent.com/AxelRamosGarcia/Genome-Mining/gh-pages/data/antismash_db.csv\", sep=\"\\t\")\ndata\n\nNow, group the data by the variables Species and BGC type:\noccurences = data.groupby([\"Species\", \"BGC type\"]).size().reset_index(name=\"Occurrences\")\nAnd visualize the content of the ocurrences grouped by species column:\noccurences\n\nLet‚Äôs see our first visualization of the BGC content on a heatmap.\npivot = occurences.pivot(index=\"BGC type\", columns=\"Species\", values=\"Occurrences\")\nplt.figure(figsize=(8, 10))\nsns.heatmap(pivot, cmap=\"coolwarm\")\nplt.show()\n\nNow, let‚Äôs restrict ourselves to S. agalactiae.\nagalactiae = occurences[occurences[\"Species\"] == \"agalactiae\"]\nsns.scatterplot(agalactiae, x=\"BGC type\", y=\"Occurrences\")\nplt.xticks(rotation=\"vertical\")\nplt.show()\n\nFinally, let‚Äôs restrict ourselves to BGC predicted less than 200 times.\nfiltered = occurences[occurences[\"Occurrences\"] &lt; 200]\nplt.figure(figsize=(15, 5))\nsns.scatterplot(filtered, x=\"BGC type\", y=\"Occurrences\")\nplt.xticks(rotation=\"vertical\")\nplt.grid(axis=\"y\")\nplt.show()\n\nfiltered_pivot = filtered.pivot(index=\"BGC type\", columns=\"Species\", values=\"Occurrences\")\nplt.figure(figsize=(8, 10))\nsns.heatmap(filtered_pivot, cmap=\"coolwarm\")\nplt.show()\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nMIBiG provides BGCs that have been experimentally tested\nantiSMASH database comprises predicted BGCs of each organism\n\n\n\nReferences\nhttps://carpentries-incubator.github.io/genome-mining/03-antiSMASHdb-MiBiG/index.html",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Bases de datos de Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap6.html",
    "href": "Cap6.html",
    "title": "7¬† Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios",
    "section": "",
    "text": "7.1 Introduction\nWithin microbial genomes, we can find some specific regions that take part in the biosynthesis of secondary metabolites, these sections are known as Biosynthetic Gene Clusters, which are relevant due to the possible applications that they may have, for example: antimicrobials, antitumors, cholesterol-lowering, immunosuppressants, antiprotozoal, antihelminth, antiviral and anti-aging activities.\nWhat is a natural Product?\nantiSMASH is a pipeline based on profile hidden Markov models that allow us to identify the gene clusters contained within the genome sequences that encode secondary metabolites of all known broad chemical classes.",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios</span>"
    ]
  },
  {
    "objectID": "Cap6.html#antismash-input-files",
    "href": "Cap6.html#antismash-input-files",
    "title": "7¬† Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios",
    "section": "7.2 antiSMASH input files",
    "text": "7.2 antiSMASH input files\nantiSMASH pipeline can work with three different file formats GenBank, FASTA and EMBL. Both GenBank and EMBL formats include genome annotations, while a FASTA file just comprises the nucleotides of each genomic contig.",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios</span>"
    ]
  },
  {
    "objectID": "Cap6.html#running-antismash",
    "href": "Cap6.html#running-antismash",
    "title": "7¬† Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios",
    "section": "7.3 Running antiSMASH",
    "text": "7.3 Running antiSMASH\nThe command line usage of antiSMASH is detailed in the following repositories:\nIn summary, you will need to use your genome as the input. Then, antiSMASH will create an output folder for each of your genomes. Within this folder, you will find a single .gbk file for each of the detected Biosynthetic Gene Clusters (we will use these files for subsequent analyses) and a .html file, among others. By opening the .html file, you can explore the antiSMASH annotations.\nYou can run antiSMASH in two ways Minimal and Full-featured run, as follows:\n\n\n\n\n\n\n\nRun type\nCommand\n\n\n\n\nMinimal run\nantismash genome.gbk\n\n\nFull-featured run\nantismash ‚Äìcb-general ‚Äìcb-knownclusters ‚Äìcb-subclusters ‚Äìasf ‚Äìpfam2go ‚Äìsmcog-trees genome.gbk\n\n\n\n\n\n\n\n\n\nExercise 1: antiSMASH scope\n\n\n\nIf you run an Streptococcus agalactiae annotated genome using antiSMASH, what results do you expect?\na. The substances that a cluster produces\nb. A prediction of the metabolites that the clusters can produce\nc. A prediction of genes that belong to a biosynthetic cluster\n\n\n\n\n\n\nSolution\n\n\n\n\n\na. False. antiSMASH is not an algorithm devoted to substance prediction.\nb. False. Although antiSMASH does have some information about metabolites produced by similar clusters, this is not its main purpose.\nc.¬†True. antiSMASH compares domains and performs a prediction of the genes that belong to biosynthetic gene clusters.",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios</span>"
    ]
  },
  {
    "objectID": "Cap6.html#run-your-own-antismash-analysis",
    "href": "Cap6.html#run-your-own-antismash-analysis",
    "title": "7¬† Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios",
    "section": "7.4 Run your own antiSMASH analysis",
    "text": "7.4 Run your own antiSMASH analysis\nFirst, activate the GenomeMining conda environment:\n$ conda deactivate\n$ conda activate /miniconda3/envs/GenomeMining_Global\nSecond, run the antiSMASH command shown earlier in this lesson on the data .gbk or .fasta files. The command can be executed either in one single file, all the files contained within a folder or in a specific list of files. Here we show how it can be performed in these three different cases:\n\n7.4.1 Running antiSMASH in a single file\nChoose the annotated file ¬¥agalactiae_A909_prokka.gbk¬¥\n$ mkdir -p ~/pan_workshop/results/antismash  \n$ cd ~/pan_workshop/results/antismash  \n$ antismash --genefinding-tool=none ~/pan_workshop/results/annotated/Streptococcus_agalactiae_A909_prokka/Streptococcus_agalactiae_A909_prokka.gbk    \nTo see the antiSMASH generated outcomes do the following:\n$ tree -L 1 ~/pan_workshop/results/antismash/Streptococcus_agalactiae_A909_prokka\n\n\n\n\n\n\nOutput\n\n\n\n.\n‚îú‚îÄ‚îÄ CP000114.1.region001.gbk\n‚îú‚îÄ‚îÄ CP000114.1.region002.gbk\n‚îú‚îÄ‚îÄ css\n‚îú‚îÄ‚îÄ images\n‚îú‚îÄ‚îÄ index.html\n‚îú‚îÄ‚îÄ js\n‚îú‚îÄ‚îÄ regions.js\n‚îú‚îÄ‚îÄ Streptococcus_agalactiae_A909.gbk\n‚îú‚îÄ‚îÄ Streptococcus_agalactiae_A909.json\n‚îú‚îÄ‚îÄ Streptococcus_agalactiae_A909.zip\n‚îî‚îÄ‚îÄ svg\n\n\n\n\n7.4.2 Running antiSMASH over a list of files\nNow, imagine that you want to run antiSMASH over all Streptococcus agalactiae annotated genomes. Use a for cycle and * as a wildcard to run antiSMASH over all files that start with ‚ÄúS‚Äù in the annotated directory.\n$ for gbk_file in ~/pan_workshop/results/annotated/*/S*.gbk\n&gt; do\n&gt;   antismash --genefinding-tool=none $gbk_file\n&gt; done",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios</span>"
    ]
  },
  {
    "objectID": "Cap6.html#visualizing-antismash-results",
    "href": "Cap6.html#visualizing-antismash-results",
    "title": "7¬† Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios",
    "section": "7.5 Visualizing antiSMASH results",
    "text": "7.5 Visualizing antiSMASH results\nIn order to see the results after an antiSMASH run, we need to access to the index.html file. Where is this file located?\n$ cd Streptococcus_agalactiae_A909_prokka\n$ pwd\n\n\n\n\n\n\nOutput\n\n\n\n~/pan_workshop/results/antismash/Streptococcus_agalactiae_A909_prokka\n\n\nAs outcomes you should get a folder comprised mainly by the following files:\n\n.gbk files For each Biosynthetic Gene cluster region found.\n.json file To know the input file name, the antiSMASH used version and the regions data (id,sequence_data).\nindex.html file To visualize the outcomes from the analysis.\n\nIn order to access these results, we can use scp protocol to download the directory in your local computer.\nIf using scp , on your local machine, open a GIT bash terminal in the destiny folder and execute the following command:\n$ scp -r user@bioinformatica.matmor.unam.mx:~/pan_workshop/results/antismash/S*A909.prokka/* ~/Downloads/.\nIf using R-studio then in the left panel, choose the ‚Äúmore‚Äù option, and ‚Äúexport‚Äù your file to your local computer. Decompress the Streptococcus_agalactiae_A909.prokka.zip file.\nAnother way to download the data to your computer, you first compress the folder and download the compressed file from JupyterHub\n$ cd ~/pan_workshop/results/antismash\n$ zip -r Streptococcus_agalactiae_A909_prokka.zip Streptococcus_agalactiae_A909_prokka\n$ ls\nIn the JupyterHub, navigate to the pan_workshop/results/antismash/ folder, select the file we just created, and press the download button at the top\nOnce in your local machine, in the directory, Streptococcus_agalactiae_A909.prokka, open the index.html file on your local web browser.\nThe visualization of the results includes many different options. To understand all the possibilities, we suggest reading the following tutorial:\nBriefly, in the ‚ÄúOverview‚Äù page ¬¥.HTML¬¥ you can find all the regions found within every analyzed record/contig (antiSMASH inputs), and summarized all this information in five main features:\n\nRegion: The region number.\nType: Type of the product detected by antiSMASH.\nFrom,To: The region‚Äôs location (nucleotides).\nMost similar known cluster: The closest compound from th MIBiG database.\nSimilarity: Percentage of genes within the closest known compound that have significant BLAST hit (The last two columns containing comparisons to the MIBiG database will only be shown if antiSMASH was run with the KnownClusterBlast option ¬¥‚Äìcc-mibig¬¥).",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios</span>"
    ]
  },
  {
    "objectID": "Cap6.html#antismash-web-services",
    "href": "Cap6.html#antismash-web-services",
    "title": "7¬† Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios",
    "section": "7.6 antiSMASH web services",
    "text": "7.6 antiSMASH web services\nantiSMASH can also be used in an online server in the antiSMASH website: You will be asked to give your email. Then, the results will be sent to you and you will be allowed to donwload a folder with the annotations.\n\nExercises and discussion\n\n\n\n\n\n\nExercise 2: NCBI and antiSMASH webserver\n\n\n\nRun antiSMASH web server over S. agalactiae A909. First, explore the NCBI assembly database to obtain the accession. Get the id of your results.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nGo to NCBI and search S. agalactiae A909.\nChoose the assembly database and copy the GenBank sequence ID at the bottom of the site.\nGo to antiSMASH\nChoose the accession from NCBI and paste CP000114.1\nRun antiSMASH and paste into the collaborative document your results id example ` bacteria-cbd13a47-8095-495f-957c-dcf58c261529`",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Identificaci√≥n de Clusters de Genes Biosint√©ticos de metabolitos secundarios</span>"
    ]
  },
  {
    "objectID": "Cap7.html",
    "href": "Cap7.html",
    "title": "8¬† Bases de datos de Miner√≠a Gen√≥mica",
    "section": "",
    "text": "8.1 Genome Mining Databases",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Bases de datos de Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap7.html#mibig-database",
    "href": "Cap7.html#mibig-database",
    "title": "8¬† Bases de datos de Miner√≠a Gen√≥mica",
    "section": "8.2 MIBiG Database",
    "text": "8.2 MIBiG Database\nThe Minimum Information about a Biosynthetic Gene cluster MIBiG is a database that facilitates consistent and systematic deposition and retrieval of data on biosynthetic gene clusters. MIBiG provides a robust community standard for annotations and metadata on biosynthetic gene clusters and their molecular products. It will empower next-generation research on the biosynthesis, chemistry and ecology of broad classes of societally relevant bioactive secondary metabolites, guided by robust experimental evidence and rich metadata components.\n\n8.2.1 Browsing and Querying in the MIBiG database\nSelect ‚ÄúSearch‚Äù on the upper right corner of the menu bar\n\nFor simple queries, such as Streptococcus agalactiae or searching for a specific strain you can use the ‚ÄúSimple search‚Äù function.\n\nFor complex queries, the database also provides a sophisticated query builder that allows querying on all antiSMASH annotations. To enable this function, click on ‚ÄúBuild a query‚Äù\n\n\n8.2.2 Results\n\n\n\n\n\n\n\nExercise 1\n\n\n\nEnter to MIBiG and search BGCs from Streptococcus. Search the BGCs that produce the products Thermophilin 1277 and Streptolysin S. Based on the table on MIBiG, which of these organisms has the most complete annotation?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nStreptococcus thermophilus produce Thermophilin 1277 while Streptococcus pyogenes M1 GAS produces Streptolysin S. According to MIBiG metadata Streptolysin S BGC is complete while Thermophilin 1277 is not. So Streptolysin S BGC is better annotated.",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Bases de datos de Miner√≠a Gen√≥mica</span>"
    ]
  },
  {
    "objectID": "Cap7.html#antismash-database",
    "href": "Cap7.html#antismash-database",
    "title": "8¬† Bases de datos de Miner√≠a Gen√≥mica",
    "section": "8.3 antiSMASH database",
    "text": "8.3 antiSMASH database\nThe antiSMASH database provides an easy to use, up-to-date collection of annotated BGC data. It allows to easily perform cross-genome analyses by offering complex queries on the datasets.\n\n8.3.1 Browsing and Querying in the antiSMASH database\nSelect ‚ÄúBrowse‚Äù on the top menu bar, alternatively you can select ‚ÄúQuery‚Äù in the center\n\nFor simple queries, such as ‚ÄúStreptococcus‚Äù or searching for a specific strain you can use the ‚ÄúSimple search‚Äù function.\n\nFor complex queries, the database also provides a sophisticated query builder that allows querying on all antiSMASH annotations. To enable this function, click on ‚ÄúBuild a query‚Äù\n\nUse antiSMASH database to analyse the BGC contained in the Streptococcus genomes. We‚Äôll use Python to visualize the data. First, import pandas, matplotlib.pyplot and seaborn libraries.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nSecondly, store in a dataframe variable the content of the Streptococcus predicted BGC downloaded from antiSMASH-db.\ndata = pd.read_csv(\"https://raw.githubusercontent.com/AxelRamosGarcia/Genome-Mining/gh-pages/data/antismash_db.csv\", sep=\"\\t\")\ndata\n\nNow, group the data by the variables Species and BGC type:\noccurences = data.groupby([\"Species\", \"BGC type\"]).size().reset_index(name=\"Occurrences\")\nAnd visualize the content of the ocurrences grouped by species column:\noccurences\n\nLet‚Äôs see our first visualization of the BGC content on a heatmap.\npivot = occurences.pivot(index=\"BGC type\", columns=\"Species\", values=\"Occurrences\")\nplt.figure(figsize=(8, 10))\nsns.heatmap(pivot, cmap=\"coolwarm\")\nplt.show()\n\nNow, let‚Äôs restrict ourselves to S. agalactiae.\nagalactiae = occurences[occurences[\"Species\"] == \"agalactiae\"]\nsns.scatterplot(agalactiae, x=\"BGC type\", y=\"Occurrences\")\nplt.xticks(rotation=\"vertical\")\nplt.show()\n\nFinally, let‚Äôs restrict ourselves to BGC predicted less than 200 times.\nfiltered = occurences[occurences[\"Occurrences\"] &lt; 200]\nplt.figure(figsize=(15, 5))\nsns.scatterplot(filtered, x=\"BGC type\", y=\"Occurrences\")\nplt.xticks(rotation=\"vertical\")\nplt.grid(axis=\"y\")\nplt.show()\n\nfiltered_pivot = filtered.pivot(index=\"BGC type\", columns=\"Species\", values=\"Occurrences\")\nplt.figure(figsize=(8, 10))\nsns.heatmap(filtered_pivot, cmap=\"coolwarm\")\nplt.show()\n\n\n\n\n\n\n\nKey Points\n\n\n\n\nMIBiG provides BGCs that have been experimentally tested\nantiSMASH database comprises predicted BGCs of each organism\n\n\n\nReferences\nhttps://carpentries-incubator.github.io/genome-mining/03-antiSMASHdb-MiBiG/index.html",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Bases de datos de Miner√≠a Gen√≥mica</span>"
    ]
  }
]